axis(2)
title(main = 'raw spectra - ROI',
xlab = expression(
paste('Wave number (cm'^'-1',
')'
)),
ylab ='absorbance (a.u.)')
search.vector <- unique(unlist(cols))
head(search.vector)
index <- list(106)
as.character(search.vector[1]) # the name of
#the first sample
which(
grepl(
paste0('(?=.*',
as.character(search.vector[1]),
')'
),
rownames(spectra.df),
perl=T
)
)
rownames(spectra.df)[c(1, 2, 3)]
for (i in 1:106){
index[[i]] <- which(
grepl(
paste0('(?=.*',
as.character(search.vector[i])
,')'),
rownames(spectra.df),
perl=T
)
)
}
search.vector[2]
rownames(spectra.df)[c(index[[2]])]
mean <- matrix(ncol= ncol(range1),
nrow = nrow(range1)/3)
# mean <- as.data.frame(mean)
colnames(mean) <- colnames(range1)
rownames(mean) <- search.vector
mean[1,1]
index[[1]]
for(j in 1:ncol(range1)){
for(i in 1:nrow(mean)){
mean[i,j] <- mean(c(range1[index[[i]][1],j],
range1[index[[i]][2],j],
range1[index[[i]][3],j]
) )
}
}
mean <- as.data.frame(mean)
cols.means <- as.factor(search.vector)
for(i in  1:length(rownames(mean))){
plot(wavenumbers1,
mean[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(1700, 400),
ylim= c(0,0.135309),
type = 'l',
col =cols.means[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
library(hyperSpec)
# hyperSpec package functions and
#data is charged in this session
spc <- new('hyperSpec', # The class of the object
spc= mean, # the spectra matrix
wavelength = wavenumbers1
# independent variable, whether wave number
#or wave length
)
bend <- 0.1 * wl.eval(spc,
function (x)
x^6+x^5+x^4+x^3+x^2,
normalize.wl =
normalize01)
bl <- spc.rubberband(spc+bend,
noise = 1e-4,
df = 20)-bend
labels (spc, ".wavelength") <-
expression(paste(
'Wave number (cm'^'-1',
')'))
labels (spc, "spc") <-
expression(paste('Absorbance (a.u.)'))
plot(spc, wl.reverse = TRUE)
plot(bl, add=TRUE, col=2,wl.reverse = TRUE)
sum <- spc+bend
plot(sum,wl.reverse = TRUE)
plot(bend, add=TRUE, col=2,wl.reverse = TRUE)
spc3 <- spc - bl
spc3 <- spc3 + (min(spc3)*-1)
# We add the minimum value
#which is negative to have only positive
#values
plot(spc3,wl.reverse = TRUE)
corrected1  <- as.data.frame(spc3[1:106])
corrected <- as.data.frame(corrected1[,1])
corrected <- corrected + (min(corrected)*-1) # shifting upwards to prevent negative values
library(pls)
correctedMSC <- msc(as.matrix(mean))
for (i in 1:length(rownames(correctedMSC))){
plot(as.numeric(colnames(correctedMSC)),
correctedMSC[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.12),
col = cols[i])
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(paste(
'Wave number (cm'^'-1',
')')),
ylab = 'Absorbance (a.u.)')
library(readxl)
metadata <- read_excel("metadata.xlsx")
colnames(metadata)
which(is.na(metadata$sample))
metadata <- metadata[-c(17),]
which(is.na(metadata$sample))
positions <- vector('list', 87) # the same sizeas metadata$sample
for (i in 1:87){
positions[[i]] <- which(
grepl(
paste0('(?=.*',
as.character(metadata$sample[i]),
')'),
rownames(corrected),
perl=T
)
)
}
metadata$sample[1]
positions[[1]]
rownames(corrected)[positions[[1]]]
for(i in 1:length(metadata$sample)) {
if(length(positions[[i]]) == 1){
metadata$spectra[i] <- rownames(corrected)[positions[[i]]]
}else{
metadata$spectra[i] <- NA
}
}
compare <- data.frame(metadata = metadata$sample, spectra = metadata$spectra)
for(i in 1:length(metadata$sample)) {
if(length(positions[[i]]) == 1){
metadata$spectra[i] <- rownames(corrected)[positions[[i]]]
}else{
metadata$spectra[i] <- NA
}
}
compare <- data.frame(metadata = metadata$sample, spectra = metadata$spectra)
compare
for(i in 1:length(metadata$sample)) {
if(length(positions[[i]]) == 1){
metadata$spectra[i] <- rownames(corrected)[positions[[i]]]
}else{
metadata$spectra[i] <- NA
}
}
for(i in 1:length(metadata$sample)) {
if(length(positions[[i]]) == 1){
metadata$spectra[i] <- rownames(corrected)[positions[[i]]]
}else{
metadata$spectra[i] <- NA
}
}
compare <- data.frame(metadata = metadata$sample, spectra = metadata$spectra)
leaves.index <- which(grepl(paste0('(?=.*','L',')'),metadata$class,perl = T))
leaves.index
str(leaves.index)
metadata.leaves <- metadata[leaves.index,]
head(metadata.leaves)
which(is.na(metadata.leaves$Si))
which(is.na(metadata.leaves$spectra))
which(is.na(metadata.leaves$Si))
which(is.na(metadata.leaves$spectra))
metadata.leaves$sample[11]
metadata.leaves.Si <- metadata.leaves[-c(11),]
leavesSiSpectra <- corrected[metadata.leaves.Si$spectra.index,]
leavesSiSpectraRaw <- mean[metadata.leaves.Si$spectra.index,]
LeavesSi <- cbind(metadata.leaves.Si$sample,metadata.leaves.Si$Si)
leaves.index <- which(grepl(paste0('(?=.*','L',')'),metadata$class,perl = T))
leaves.index
metadata.leaves <- metadata[leaves.index,]
head(metadata.leaves)
which(is.na(metadata.leaves$Si))
which(is.na(metadata.leaves$spectra))
metadata.leaves$sample[11]
metadata.leaves.Si <- metadata.leaves[-c(11),]
LeavesSi <- cbind(metadata.leaves.Si$sample,metadata.leaves.Si$Si)
leavesSiSpectra <- corrected[metadata.leaves.Si$spectra.index,]
leavesSiSpectraRaw <- mean[metadata.leaves.Si$spectra.index,]
leavesSiSpectra <- corrected[metadata.leaves.Si$leaves.index,]
leavesSiSpectraRaw <- mean[metadata.leaves.Si$leaves.index,]
metadata.leaves.Si
View(metadata.leaves.Si)
leavesSiSpectra <- corrected[metadata.leaves.Si$spectra,]
leavesSiSpectraRaw <- mean[metadata.leaves.Si$spectra,]
par(mfrow = c(1,2))
for (i in 1:length(rownames(leavesSiSpectraRaw ))){
plot(as.numeric(colnames(leavesSiSpectraRaw )),
leavesSiSpectraRaw [i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.1))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
par(new = F)
for (i in 1:length(rownames(leavesSiSpectra))){
plot(as.numeric(colnames(leavesSiSpectra)),
leavesSiSpectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.1))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
par(mfrow = c(1,2))
for (i in 1:length(rownames(leavesSiSpectraRaw ))){
plot(as.numeric(colnames(leavesSiSpectraRaw )),
leavesSiSpectraRaw [i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.1))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
par(new = F)
for (i in 1:length(rownames(leavesSiSpectra))){
plot(as.numeric(colnames(leavesSiSpectra)),
leavesSiSpectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.1))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
for(i in 1:length(metadata$sample)) {
if(length(positions[[i]]) == 1){
metadata$spectra.index[i] <- positions[[i]]
}else{
metadata$spectra.index[i] <- NA
}
}
for(i in 1:length(metadata$sample)) {
if(length(positions[[i]]) == 1){
metadata$spectra.index[i] <- positions[[i]]
}else{
metadata$spectra.index[i] <- NA
}
}
metadata
metadata.leaves <- metadata[leaves.index,]
head(metadata.leaves)
leavesSiSpectra <- corrected[metadata.leaves.Si$spectra.index,]
leavesSiSpectraRaw <- mean[metadata.leaves.Si$spectra.index,]
View(metadata.leaves.Si)
View(metadata.leaves)
metadata.leaves.Si <- metadata.leaves[-c(11),]
metadata.leaves.Si
which(is.na(metadata.leaves$Si))
which(is.na(metadata.leaves$spectra))
metadata.leaves$sample[11]
metadata.leaves.Si <- metadata.leaves[-c(11),]
leavesSiSpectra <- corrected[metadata.leaves.Si$spectra.index,]
leavesSiSpectraRaw <- mean[metadata.leaves.Si$spectra.index,]
for(i in 1:length(metadata$sample)) {
if(length(positions[[i]]) == 1){
metadata$spectra[i] <-
rownames(corrected)[positions[[i]]]
}else{
metadata$spectra[i] <- NA
}
}
for(i in 1:length(metadata$sample)) {
if(length(positions[[i]]) == 1){
metadata$spectra[i] <-
rownames(corrected)[positions[[i]]]
}else{
metadata$spectra[i] <- NA
}
}
for(i in 1:length(metadata$sample)) {
if(length(positions[[i]]) == 1){
metadata$spectra[i] <-
rownames(corrected)[positions[[i]]]
}else{
metadata$spectra[i] <- NA
}
}
metadata.leaves <- metadata[leaves.index,]
A <- as.Date('2019-07-30')
B <- as.Date('2020-01-29')
C <- as.Date('2020-09-14')
D <- as.Date('2020-12-31')
E <- as.Date('2021-02-01')
F <- as.Date('2021-03-24')
G <- as.Date('2021-03-14')
H <- as.Date('2021-06-11')
sum(c(),)
sum(c(H-G,F-E,D-C,B-A))
sum(c(H-G,F-E,D-C,B-A))/30
leavesSiSpectra <- as.matrix(leavesSiSpectra)
SiTable <- data.frame(Si = I(metadata.leaves.Si$Si),spectra = I(leavesSiSpectra) )
nuevoRango <-   leavesSiSpectra[,c(261:676)]
colnames( leavesSiSpectra[,c(261,676)])
View(SiTable)
SiTable
str(SiTable)
View(leavesSiSpectra[,c(261:676)])
colnames( leavesSiSpectra[,c(261,676)])
library(pls)
SiPLS <- plsr(SiTable$Si~ newRange,
ncomp = 10,
data = SiTable,
validation = 'LOO')
leavesSiSpectra <- as.matrix(leavesSiSpectra)
SiTable <- data.frame(Si = I(metadata.leaves.Si$Si),spectra = I(leavesSiSpectra) )
newRange <-   leavesSiSpectra[,c(261:676)]
colnames( leavesSiSpectra[,c(261,676)])
library(pls)
SiPLS <- plsr(SiTable$Si~ newRange,
ncomp = 10,
data = SiTable,
validation = 'LOO')
library(pls)
SiPLS <- plsr(SiTable$Si~ newRange,
ncomp = 10,
data = SiTable,
validation = 'LOO')
summary(SiPLS)
library(pls)
SiPLS <- plsr(SiTable$Si~ newRange,
ncomp = 10,
data = SiTable,
validation = 'LOO')
plot(RMSEP(gas1), legendpos = "topright")
plot(RMSEP(SiPLS), legendpos = "topright")
A <- as.Date('2019-07-30')
B <- as.Date('2020-01-29')
C <- as.Date('2020-09-14')
D <- as.Date('2020-12-31')
E <- as.Date('2021-02-01')
F <- as.Date('2021-03-24')
G <- as.Date('2021-03-14')
H <- as.Date('2021-06-11')
sum(c(H-G,F-E,D-C,B-A))/30
sum(c(H-G,F-E,D-C,B-A))/30/12
1+1e-2.41
library(mdatools)
View(newRange)
library(mdatools)
LeavesPLS <- pls(NewRange,
SiTable$Si)
library(mdatools)
LeavesPLS <- pls(newRange,
SiTable$Si,
10,
scale=F,
cv =1)
library(mdatools)
LeavesPLS <- pls(newRange,
SiTable$Si,
10,
cv =1)
summary(humPLS)
summary(LeavesPLS)
summary(LeavesPLS$cal)
summary(LeavesPLS$res$cal)
plot(humPLS)
plot(LeavesPLS)
win.graph()
plot(LeavesPLS)
library(pls)
SiPLS <- plsr(SiTable$Si~ newRange,
ncomp = 10,
data = SiTable,
validation = 'LOO')
plot(RMSEP(SiPLS),type="b",legendpos="topright")
win.graph()
plot(RMSEP(SiPLS),type="b",legendpos="topright")
win.graph()
win.graph()
plot(LeavesPLS)
win.graph()
plot(LeavesPLS)
par(mfrow=c(2,2))
plotXVariance(LeavesPLS)
plotXCumVariance(LeavesPLS)
plotYVariance(LeavesPLS)
plotYCumVariance(LeavesPLS)
win.graph()
par(mfrow=c(2,2))
plotXVariance(LeavesPLS)
plotXCumVariance(LeavesPLS)
plotYVariance(LeavesPLS)
plotYCumVariance(LeavesPLS)
plot(LeavesPLS)
win.graph()
https://open.spotify.com/artist/6w1XCiB8efbfnusJ2jzmvu?si=MJKsBq9WTm2nNkKZ_E6xbA
plot(LeavesPLS)
library(mdatools)
LeavesPLS <- pls(leavesSiSpectra,
SiTable$Si,
10,
cv =1)
summary(LeavesPLS)
summary(LeavesPLS$res$cal)
plot(LeavesPLS)
library(mdatools)
LeavesPLS <- pls(newRange,
SiTable$Si,
10,
cv =1)
summary(LeavesPLS)
plot(LeavesPLS)
ga_pls(y, X, GA.threshold = 10, iters = 5, popSize = 100)
ga_pls(SiTable$Si, newRange, GA.threshold = 10, iters = 5, popSize = 100)
install.packages('plsVarSel')
library(plsVarSel)
ga_pls(SiTable$Si, newRange, GA.threshold = 10, iters = 5, popSize = 100)
library(plsVarSel)
ga_pls(SiTable$Si, leavesSiSpectra, GA.threshold = 10, iters = 5, popSize = 100)
library(plsVarSel)
gaVarSel <- ga_pls(SiTable$Si, leavesSiSpectra, GA.threshold = 10, iters = 5, popSize = 100)
View(gaVarSel)
library(plsVarSel)
gaVarSel <- ga_pls(SiTable$Si, leavesSiSpectra, GA.threshold = 10, iters = 5, popSize = 100)
gaLeavesPLs <-pls(leavesSiSpectra[,gaVarSel],
SiTable$Si,
10,
cv =1)
gaLeavesPLS <-pls(leavesSiSpectra[,unlist(gaVarSel)],
SiTable$Si,
10,
cv =1)
plot(gaLeavesPLS)
win.graph()
plot(gaLeavesPLS)
library(plsVarSel)
gaVarSel <- ga_pls(SiTable$Si, newRange, GA.threshold = 10, iters = 5, popSize = 100)
gaLeavesPLS <-pls(newRange[,unlist(gaVarSel)],
SiTable$Si,
10,
cv =1)
win.graph()
plot(gaLeavesPLS)
win.graph()
plot(gaLeavesPLS)
library(plsVarSel)
gaVarSel <- ga_pls(SiTable$Si, newRange, GA.threshold = 10, iters = 5, popSize = 100)
gaLeavesPLS <-pls(newRange[,unlist(gaVarSel)],
SiTable$Si,
10,
cv =1)
win.graph()
plot(gaLeavesPLS)
win.graph()
plot(LeavesPLS)
