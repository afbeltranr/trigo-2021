plotPredictions(LeavesPLS)
library(mdatools)
LeavesPLS <-
pls(Sispectra[,gen$bestsets[8,]],
SiTable$Si,
10,
cv =1)
plot(LeavesPLS)
library(mdatools)
wheatPLS <-
pls(Sispectra[,gen$bestsets[8,]],
SiTable$Si,
10,
cv =1)
plot(wheatPLS)
wheatPLS
View()
View(wheatPLS)
selectedpca <- prcomp(Sispectra[gen$bestsets[8,],])
Sispectra[gen$bestsets[8,],]
is.na(Sispectra[gen$bestsets[8,],])
which(is.na(Sispectra[gen$bestsets[8,],]))
selectedpca <- prcomp(Sispectra[,gen$bestsets[8,]])
variance <- round(vp/sum(vp)*100,2)
selectedpca <- prcomp(Sispectra[,gen$bestsets[8,]])
selectedVp <- (selectedpca$sdev)^2
selectedVariance <- round(vp/sum(vp)*100,2)
selectedVariance
selectedpca <- prcomp(Sispectra[,gen$bestsets[8,]])
selectedVp <- (selectedpca$sdev)^2
selectedVariance <- round(vp/sum(vp)*100,2)
oord <- pcaall$x
plot(coord[,1],
coord[,2],
col=colspca,
xlab="PC1 - 71.88 %",
ylab= "PC2 - 13.51 %",
pch=19
)
abline(v=0, h=0, lty=2)
text(coord[,1],
coord[,2],
metadata.si$sample,
cex=0.4,
pos=1)
par(mfrow=c(4,3))
for(j in 1:nrow(gen$bestsets)){
for (i in 1:length(rownames(Sispectra))){
plot(as.numeric(colnames(Sispectra)),
Sispectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.06))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = paste(
as.character(c(5:16)[j]),
'variables'),
xlab = expression(
paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
abline(v = as.numeric(
colnames(
Sispectra
)[gen$bestsets[j,]]),
col = 2,
lty = 2)
}
library(mdatools)
wheatPLS <-
pls(Sispectra[,gen$bestsets[8,]],
SiTable$Si,
10,
cv =1)
plot(wheatPLS)
library(mdatools)
wheatPLS <-
pls(Sispectra[,gen$bestsets[8,]],
SiTable$Si,
10,
cv =1)
plotPredictions(wheatPLS)
AllPLSSiTable <- data.frame(I(SiTable$Si),I(Sispectra))
View(AllPLSSiTable)
Colnames(AllPLSSiTable)
colnames(AllPLSSiTable)
AllPLSSiTable <- data.frame(I(SiTable$Si),I(Sispectra))
library(pls) # Se asegura de cargar la libraría necesaria para realizar los cálculos de pls.
mab.pls=plsr(SiTable.Si~Sispectra,ncomp=10,data=AllPLSSiTable,validation="LOO",scale=F) # Realiza el "pls" a los datos previamente acondicionados.
AllPLSSiTable <- data.frame(I(SiTable$Si),I(Sispectra))
library(pls) # Se asegura de cargar la libraría necesaria para realizar los cálculos de pls.
mab.pls=plsr(SiTable.Si~Sispectra,ncomp=10,data=AllPLSSiTable,validation="LOO",scale=F) # Realiza el "pls" a los datos previamente acondicionados.
str(Sispectra)
Sispectra <- as.data.frame(Sispectra)
AllPLSSiTable <- data.frame(I(SiTable$Si),I(Sispectra))
library(pls) # Se asegura de cargar la libraría necesaria para realizar los cálculos de pls.
mab.pls=plsr(SiTable.Si~Sispectra,ncomp=10,data=AllPLSSiTable,validation="LOO",scale=F) # Realiza el "pls" a los datos previamente acondicionados.
Sispectra <- as.data.frame(Sispectra)
AllPLSSiTable <- data.frame(I(SiTable$Si),I(Sispectra))
library(pls) # Se asegura de cargar la libraría necesaria para realizar los cálculos de pls.
mab.pls=plsr(SiTable.Si~Sispectra,ncomp=10,data=AllPLSSiTable,validation="LOO",scale=F) # Realiza el "pls" a los datos previamente acondicionados.
Sispectra
str(Sispectra)
Sispectra <- as.matrix(Sispectra)
AllPLSSiTable <- data.frame(I(SiTable$Si),I(Sispectra))
library(pls) # Se asegura de cargar la libraría necesaria para realizar los cálculos de pls.
mab.pls=plsr(SiTable.Si~Sispectra,ncomp=10,data=AllPLSSiTable,validation="LOO",scale=F) # Realiza el "pls" a los datos previamente acondicionados.
Sispectra <- as.matrix(Sispectra)
AllPLSSiTable <- data.frame(I(SiTable$Si),I(Sispectra))
library(pls) # Se asegura de cargar la libraría necesaria para realizar los cálculos de pls.
SiAllPLSplsr <- plsr(SiTable.Si~Sispectra,ncomp=10,data=AllPLSSiTable,validation="LOO",scale=F) # Realiza el "pls" a los datos previamente acondicionados.
Sispectra <- as.matrix(Sispectra)
AllPLSSiTable <- data.frame(I(SiTable$Si),I(Sispectra))
library(pls) # Se asegura de cargar la libraría necesaria para realizar los cálculos de pls.
SiAllPLSplsr <- plsr(SiTable.Si~Sispectra,ncomp=10,data=AllPLSSiTable,validation="LOO",scale=F) # Realiza el "pls" a los datos previamente acondicionados.
plot(SiAllPLSplsr,ncomp=4,line=TRUE)
Sispectra <- as.matrix(Sispectra)
AllPLSSiTable <- data.frame(I(SiTable$Si),I(Sispectra))
library(pls) # Se asegura de cargar la libraría necesaria para realizar los cálculos de pls.
SiAllPLSplsr <- plsr(SiTable.Si~Sispectra[,gen$bestsets[8,]],ncomp=10,data=AllPLSSiTable,validation="LOO",scale=F) # Realiza el "pls" a los datos previamente acondicionados.
plot(SiAllPLSplsr,ncomp=4,line=TRUE)
which(SiTable$Si<0)
library(mdatools)
wheatPLS <-
pls(Sispectra[,gen$bestsets[8,]],
SiTable$Si,
10,
cv =1)
plot(wheatPLS)
Sispectra <- as.matrix(Sispectra)
AllPLSSiTable <- data.frame(I(SiTable$Si),I(Sispectra))
library(pls) # Se asegura de cargar la libraría necesaria para realizar los cálculos de pls.
SiAllPLSplsr <- plsr(SiTable.Si~Sispectra[,gen$bestsets[8,]],ncomp=10,data=AllPLSSiTable,validation="LOO",scale=F) # Realiza el "pls" a los datos previamente acondicionados.
predictedvalues <- predict(SiAllPLSplsr,ncomp = 2,newdata = Sispectra[,gen$bestsets[8,]])
predictedvalues
SiTable
Sispectra <- as.matrix(Sispectra)
AllPLSSiTable <- data.frame(I(SiTable$Si),I(Sispectra))
library(pls) # Se asegura de cargar la libraría necesaria para realizar los cálculos de pls.
SiAllPLSplsr <- plsr(SiTable.Si~Sispectra[,gen$bestsets[8,]],ncomp=10,data=AllPLSSiTable,validation="LOO",scale=F) # Realiza el "pls" a los datos previamente acondicionados.
predictedvalues <- predict(SiAllPLSplsr,ncomp = 2,newdata = Sispectra[,gen$bestsets[8,]])
plot(SiTable$Si, predictedvalues [,1,1],main="Hg") # Si
abline(a=0,b=1,col=2)
model <- lm(predictedvalues~SiTable$Si)
model <- lm(predictedvalues~SiTable$Si)
summary(model)
Sispectra <- as.matrix(Sispectra)
AllPLSSiTable <- data.frame(I(SiTable$Si),I(Sispectra))
library(pls) # Se asegura de cargar la libraría necesaria para realizar los cálculos de pls.
SiAllPLSplsr <- plsr(SiTable.Si~Sispectra[,gen$bestsets[8,]],ncomp=10,data=AllPLSSiTable,validation="LOO",scale=F) # Realiza el "pls" a los datos previamente acondicionados.
predictedvalues <- predict(SiAllPLSplsr,ncomp = 2,newdata = Sispectra[,gen$bestsets[8,]])
plot(SiTable$Si, predictedvalues [,1,1],main="Hg") # Si
model <- lm(predictedvalues~SiTable$Si)
abline(a= 9113.6429,b=0.3607,col=2)
Sispectra <- as.matrix(Sispectra)
AllPLSSiTable <- data.frame(I(SiTable$Si),I(Sispectra))
library(pls) # Se asegura de cargar la libraría necesaria para realizar los cálculos de pls.
SiAllPLSplsr <- plsr(SiTable.Si~Sispectra[,gen$bestsets[8,]],ncomp=10,data=AllPLSSiTable,validation="LOO",scale=F) # Realiza el "pls" a los datos previamente acondicionados.
predictedvalues <- predict(SiAllPLSplsr,ncomp = 2,newdata = Sispectra[,gen$bestsets[8,]])
plot(SiTable$Si, predictedvalues [,1,1],main="") # Si
model <- lm(predictedvalues~SiTable$Si)
abline(a= 9113.6429,b=0.3607,col=2)
names <- list.files(pattern = '.CSV')
spectra.list <- lapply(names,
read.csv,
header = F)
wavenumbers <- unlist(spectra.list[[1]][1])
spectra.list2 <- lapply(spectra.list, '[', 2)
spectra.df <- as.data.frame(
t(as.data.frame(spectra.list2))
)
rownames(spectra.df) <- names
colnames(spectra.df) <- wavenumbers
# gsub('.{6}$', '', names)
head(names[1:3])
names2 <- gsub('.{4}$',
'',
rownames(spectra.df))
head(names2[1:4])
head(names2[292:318])
names2[292:318] <- gsub('.{41}$',
'',
rownames(
spectra.df
)[292:318])
head(names2[292:318])[1:4]
rownames(spectra.df) <- names2
options(width = 30)
cols <- factor(gsub('.{2}$', '', names2))
head(cols)
for(i in  1:length(rownames(spectra.df))){
plot(wavenumbers,
spectra.df[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
range1 <- spectra.df[,c(1:676)]
wavenumbers1 <- wavenumbers[c(1:676)]
for(i in  1:length(rownames(range1))){
plot(wavenumbers1,
range1[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(1700, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')'
)),
ylab ='absorbance (a.u.)')
options(width = 30)
search.vector <- unique(unlist(cols))
index <- list(106)
for (i in 1:106){
index[[i]] <- which(
grepl(
paste0('(?=.*',
as.character(search.vector[i])
,')'),
rownames(spectra.df),
perl=T
)
)
}
mean <- matrix(ncol= ncol(range1),
nrow = nrow(range1)/3)
colnames(mean) <- colnames(range1)
rownames(mean) <- search.vector
for(j in 1:ncol(range1)){
for(i in 1:nrow(mean)){
mean[i,j] <- mean(c(range1[index[[i]][1],j],
range1[index[[i]][2],j],
range1[index[[i]][3],j]
) )
}
}
mean <- as.data.frame(mean)
cols.means <- as.factor(search.vector)
for(i in  1:length(rownames(mean))){
plot(wavenumbers1,
mean[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(1700, 400),
ylim= c(0,0.135309),
type = 'l',
col =cols.means[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
png('baseline.png', width = 1920, height = 480)
library(hyperSpec)
spc <- new('hyperSpec', # The class of the object
spc= mean, # the spectra matrix
wavelength = wavenumbers1
# independent variable, whether wave number
#or wave length
)
bend <- 0.1 * wl.eval(spc,
function (x)
x^6+x^5+x^4+x^3+x^2,
normalize.wl =
normalize01)
bl <- spc.rubberband(spc+bend,
noise = 1e-4,
df = 20)-bend
labels (spc, ".wavelength") <-
expression(paste(
'Wave number (cm'^'-1',
')'))
labels (spc, "spc") <-
expression(paste('Absorbance (a.u.)'))
par(mfrow = c(1,3))
plot(spc, wl.reverse = TRUE)
plot(bl, add=TRUE, col=2,wl.reverse = TRUE)
par(new = F)
sum <- spc+bend
plot(sum,wl.reverse = TRUE)
plot(bend, add=TRUE, col=2,wl.reverse = TRUE)
par(new = F)
spc3 <- spc - bl
spc3 <- spc3 + (min(spc3)*-1)
# We add the minimum value
#which is negative to have only positive
#values
plot(spc3,wl.reverse = TRUE)
dev.off()
corrected1  <- as.data.frame(spc3[1:106])
corrected <- as.data.frame(corrected1[,1])
corrected <- corrected + (min(corrected)*-1)
knitr::include_graphics(rep("baseline.png", 1))
library(readxl)
metadata <- read_excel("metadata.xlsx")
metadata <- metadata[-c(17),]
positions <- vector('list', 87)
# the same sizeas metadata$sample
for (i in 1:87){
positions[[i]] <- which(
grepl(
paste0('(?=.*',
as.character(
metadata$sample[i]),
')'),
rownames(corrected),
perl=T
)
)
}
metadata$spectra<- rep(0, nrow(metadata))
for(i in 1:length(metadata$sample)) {
if(length(positions[[i]]) == 1){
metadata$spectra[i] <-
rownames(corrected)[positions[[i]]]
}else{
metadata$spectra[i] <- NA
}
}
compare <- data.frame(metadata =
metadata$sample,
spectra =
metadata$spectra)
metadata$spectra.index <- rep(0, nrow(metadata))
for(i in 1:length(metadata$sample)) {
if(length(positions[[i]]) == 1){
metadata$spectra.index[i] <- positions[[i]]
}else{
metadata$spectra.index[i] <- NA
}
}
metadata.class <- metadata[
-c( which(
is.na(metadata$class))),]
metadata.class2 <-
metadata.class[
-c(which
(is.na(
metadata.class$spectra.index)) ),]
spectra.class <- corrected[
metadata.class2$spectra.index,]
compare.class <- data.frame(
classification = metadata.class2$sample,
spectra = rownames(spectra.class))
df1 <- spectra.class
names.class <-
paste(metadata.class2$class, rownames(
spectra.class))
rownames(df1) <- names.class
logdf <- log10(df1[,1:676] + 1)
rownames(logdf) <- names.class
hClust1 <- hclust(dist(logdf))
png('hclust1.png', width = 1920, height = 480)
plot(hClust1)
dev.off()
knitr::include_graphics(rep("hclust1.png", 1))
library(factoextra)
res.hk <-hkmeans(logdf,
5,
hc.metric =  'minkowski')
png('hkmeans.png', width =  5760, height =  2880, res = 800)
fviz_dend(res.hk,
cex = 0.5,
palette = "jco",
rect = TRUE,
rect_border = "jco",
rect_fill = TRUE)
dev.off()
knitr::include_graphics(rep("hkmeans.png", 1))
grepl(
paste0('(?=.*',
'L',
')'),
metadata.class2$class[i],perl = T))
grepl(paste0('(?=.*','L'')'),
metadata.class2$class[i],perl = T))
grepl(
paste0('(?=.*',
'L',
')'),
metadata.class2$class[i],perl = T)
grepl(
paste0('(?=.*',
'L',
')'),
metadata.class2$class,perl = T)
grepl(
paste0('(?=.*',
'++',
')'),
metadata.class2$class,perl = T)
grepl(
paste0('(?=.*',
'-',
')'),
metadata.class2$class,perl = T)
grepl(
paste0('(?=.*',
'++',
')'),
metadata.class2$class,perl = T)
grepl(
paste0('(?=.*',
'\+',
')'),
metadata.class2$class,perl = T)
grepl(
paste0('(?=.*',
'\+',
')'),
metadata.class2$class,perl = T)
grepl(
paste0('(?=.*',
'\+',
')'),
metadata.class2$class, perl = T)
grepl(
paste0('(?=.*',
'\+',
')'),
metadata.class2$class[i],perl = T)
grepl(
paste0('(?=.*',
'-',
')'),
metadata.class2$class[i],perl = T)
grepl(
paste0('(?=.*',
'\+\+',
')'),
metadata.class2$class[i],perl = T)
grepl(
paste0('(?=.*',
'\+\+',
')'),
metadata.class2$class,perl = T)
grepl(
paste0('(?=.*',
'\+\+',
')'),
metadata.class2$class,perl = T)
paste0('(?=.*',
'\+\+',
')')
paste0('(?=.*',
'\+\+',
')')
paste0('(?=.*','\+\+',')')
paste0('(?=.*','\\+\\+',')')
grepl(
paste0('(?=.*',
'\\+\\+',
')'),
metadata.class2$class,perl = T)
grepl(paste0('(?=.*','\\+\\+',')'),metadata.class2$class,perl = T)
metadata$sample[grepl(paste0('(?=.*','\\+\\+',')'),metadata.class2$class,perl = T)]
metadata$class[grepl(paste0('(?=.*','\\+\\+',')'),metadata.class2$class,perl = T)]
metadata$class[grepl('(.)\1{2,}',metadata.class2$class,perl = T)]
metadata$class[grepl('/\(.\)\1\{2}',metadata.class2$class,perl = T)]
metadata$class[grepl('/\\(.\)\1\{2}',metadata.class2$class,perl = T)]
metadata$class[grepl('/\\(.\)\1\{2}',metadata.class2$class,perl = T)]
metadata$class[grepl('/\\(.\\)\\1\\{2}',metadata.class2$class,perl = T)]
metadata$class[grepl('/\\(.\\)\\1\\{2}',metadata.class2$class,perl = T)]
grepl(
paste0('(?=.*',
'-',
')'),
metadata.class2$class,perl = T)
grepl(paste0('(?=.*','-',')'),metadata.class2$class,perl = T)
metadata.class$class[grepl(paste0('(?=.*','-',')'),metadata.class2$class,perl = T)]
metadata.class$class[grepl(paste0('(?=.*','\-',')'),metadata.class2$class,perl = T)]
metadata.class$class[grepl(paste0('(?=.*','\\-',')'),metadata.class2$class,perl = T)]
