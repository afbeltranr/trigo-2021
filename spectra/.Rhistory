listOfModels[[i]] <- train(Si ~.,
data = listOfTables[[i]],
method = "lm",
trControl = train_control)
listOfRMSEP[[i]] <- listOfModels[[i]]$resample$RMSE
}
)
# # R program to implement
# # repeated K-fold cross-validation
#
# # setting seed to generate a
# # reproducible random sampling
# set.seed(125)
#
# # defining training control as
# # repeated cross-validation and
# # value of K is 10 and repetation is 3 times
# train_control <- trainControl(method = "repeatedcv",
#                             number = 10, repeats = 3)
#
# # training the model by assigning sales column
# # as target variable and rest other column
# # as independent variable
# model <- train(Si ~., data = marketing,
#                method = "lm",
#                trControl = train_control)
#
# # printing model performance metrics
# # along with other details
# print(model)
length(listOfRMSEP[[1]])
class(listOfRMSEP[[1]])
RMSEP <- c(listOfRMSEP[[1]],listOfRMSEP[[2]],listOfRMSEP[[3]],listOfRMSEP[[4]],listOfRMSEP[[5]],listOfRMSEP[[6]],listOfRMSEP[[7]],listOfRMSEP[[8]],listOfRMSEP[[9]])
View(gen)
RMSEPTable <- data.frame(RMSEP = RMSEP, variables = c(rep(4,1000),rep(5,1000),rep(6,1000),rep(7,1000),rep(8,1000),rep(9,1000),rep(10,1000),rep(11,1000),rep(12,1000)))
library(ggplot2)
ggplot(RMSEPTable, aes(x=variables, y=RMSEP)) +
geom_violin(trim=FALSE, fill="gray")+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")+
geom_boxplot(width=0.1)+
theme_classic()
RMSEPTable$variables <- as.factor(RMSEPTable$variables)
library(ggplot2)
ggplot(RMSEPTable, aes(x=variables, y=RMSEP)) +
geom_violin(trim=FALSE, fill="gray")+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")+
geom_boxplot(width=0.1)+
theme_classic()
library(ggplot2)
p<- ggplot(RMSEPTable, aes(x=variables, y=RMSEP)) +
geom_violin(trim=FALSE, fill="gray")+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")+
geom_boxplot(width=0.1)+
theme_classic()
p
win.graph()
p<- ggplot(RMSEPTable, aes(x=variables, y=RMSEP)) +
geom_violin(trim=FALSE, fill="gray")+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")+
geom_boxplot(width=0.1)+
theme_classic()
p
p<- ggplot(RMSEPTable, aes(x=variables, y=RMSEP)) +
geom_violin(trim=FALSE, fill="gray")+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")+
geom_boxplot(width=0.1)+
theme_classic()
p
p<- ggplot(RMSEPTable, aes(x=variables, y=RMSEP)) +
geom_violin(trim=FALSE, fill="gray")+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")+
geom_boxplot(width=0.1)+
scale_fill_brewer(palette="Blues") + theme_classic()
p
p<- ggplot(RMSEPTable, aes(x=variables, y=RMSEP)) +
geom_violin(trim=FALSE)+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")+
geom_boxplot(width=0.1)+
scale_fill_brewer(palette="Blues") + theme_classic()
p
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")
dp + scale_fill_brewer(palette="Dark2") + theme_minimal()
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")
dp + scale_fill_brewer(palette="Blues") + theme_classic()
win.graph
win.graph()
dp + scale_fill_brewer(palette="Blues") + theme_classic()
win.graph()
dp + scale_fill_brewer(palette="Blues") + theme_classic()
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill=variables)+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill=RMSEPTable$variables)+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")
dp + scale_fill_brewer(palette="Blues") + theme_classic()
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='slateblue')+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")
dp + scale_fill_brewer(palette="Blues") + theme_classic()
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")
dp + scale_fill_brewer(palette="Blues") + theme_classic()
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP, fill=variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")
dp + scale_fill_brewer(palette="Blues") + theme_classic()
win.graph()
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP, fill=variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")
dp + scale_fill_brewer(palette="Blues") + theme_minimal()
predictions8Var <- predict(mols,  newdata = as.data.frame(leavesSiSpectra[,gen$bestsets[4,]]))
predX8Var <- SiTable$Si
predY8var <- predictions8Var
table8bar <- data.frame(I( predX8Var),I(predY8var))
lm.C <- lm(predX8Var~predY8var)
plot(predX8Var,
predY8var,
xlab="Si real (ppm)" ,
ylab="Si predicho (ppm)",
pch=17,
cex=1.2,
col="darkorchid4",
cex.lab=1
)
abline(a=-5.856e-10  , b=1, col=1, lty=1, lwd=2)
# legend("topleft", recta.restado, pch=pch ,col=colfin, cex=1)
predictions8Var <- predict(mols,  newdata = as.data.frame(leavesSiSpectra[,gen$bestsets[3,]]))
predX8Var <- SiTable$Si
predY8var <- predictions8Var
table8bar <- data.frame(I( predX8Var),I(predY8var))
lm.C <- lm(predX8Var~predY8var)
plot(predX8Var,
predY8var,
xlab="Si real (ppm)" ,
ylab="Si predicho (ppm)",
pch=17,
cex=1.2,
col="darkorchid4",
cex.lab=1
)
abline(a=-5.856e-10  , b=1, col=1, lty=1, lwd=2)
# legend("topleft", recta.restado, pch=pch ,col=colfin, cex=1)
mols <- lm(metadata.leaves.Si$Si ~ leavesSiSpectra[,gen$bestsets[3,]], y = T, x = T)
summary(mols)
predictions8Var <- predict(mols,  newdata = as.data.frame(leavesSiSpectra[,gen$bestsets[3,]]))
predX8Var <- SiTable$Si
predY8var <- predictions8Var
table8bar <- data.frame(I( predX8Var),I(predY8var))
lm.C <- lm(predX8Var~predY8var)
plot(predX8Var,
predY8var,
xlab="Si real (ppm)" ,
ylab="Si predicho (ppm)",
pch=17,
cex=1.2,
col="darkorchid4",
cex.lab=1
)
abline(a=-5.856e-10  , b=1, col=1, lty=1, lwd=2)
# legend("topleft", recta.restado, pch=pch ,col=colfin, cex=1)
mols <- lm(metadata.leaves.Si$Si ~ leavesSiSpectra[,gen$bestsets[4,]], y = T, x = T)
summary(mols)
predictions8Var <- predict(mols,  newdata = as.data.frame(leavesSiSpectra[,gen$bestsets[3,]]))
predX8Var <- SiTable$Si
predY8var <- predictions8Var
table8bar <- data.frame(I( predX8Var),I(predY8var))
lm.C <- lm(predX8Var~predY8var)
plot(predX8Var,
predY8var,
xlab="Si real (ppm)" ,
ylab="Si predicho (ppm)",
pch=17,
cex=1.2,
col="darkorchid4",
cex.lab=1
)
abline(a=-5.856e-10  , b=1, col=1, lty=1, lwd=2)
# legend("topleft", recta.restado, pch=pch ,col=colfin, cex=1)
predictions8Var <- predict(mols,  newdata = as.data.frame(leavesSiSpectra[,gen$bestsets[4,]]))
predX8Var <- SiTable$Si
predY8var <- predictions8Var
table8bar <- data.frame(I( predX8Var),I(predY8var))
lm.C <- lm(predX8Var~predY8var)
plot(predX8Var,
predY8var,
xlab="Si real (ppm)" ,
ylab="Si predicho (ppm)",
pch=17,
cex=1.2,
col="darkorchid4",
cex.lab=1
)
abline(a=-5.856e-10  , b=1, col=1, lty=1, lwd=2)
# legend("topleft", recta.restado, pch=pch ,col=colfin, cex=1)
?list.files
namesNIST <- list.files(path = "./AppleLeaves",pattern = '.CSV')
namesNIST
spectra.listNIST <- lapply(namesNIST, read.csv, header = F)
?read.csv
paste0('./AppleLeaves',namesNIST)
paste0('./AppleLeaves/',namesNIST)
spectra.listNIST <- lapply(paste0('./AppleLeaves/',namesNIST), read.csv, header = F)
View(spectra.listNIST)
wavenumbersNIST <- unlist(spectra.listNIST[[1]][1])
spectra.list2NIST <- lapply(spectra.listNIST, '[', 2)
spectra.dfNIST <- as.data.frame(t(as.data.frame(spectra.list2NIST)))
rownames(spectra.dfNIST) <- names
rownames(spectra.dfNIST) <- namesNIST
colnames(spectra.dfNIST) <- wavenumbersNIST
'.{4}$'
for(i in  1:length(rownames(spectra.dfNIST))){
plot(wavenumbersNIST,
spectra.dfNIST[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = 'raw spectra full range',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab ='absorbance (a.u.)')
colnames(spectra.df)[c(1,676)]
range1NIST <- spectra.dfNIST[,c(1:676)]
wavenumbers1NIST <- wavenumbersNIST[c(1:676)]
for(i in  1:length(rownames(range1NIST))){
plot(wavenumbers1NIST,
range1NIST[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(1700, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = 'raw spectra - ROI',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab ='absorbance (a.u.)')
range1NIST <- spectra.dfNIST[,c(1:676)]
wavenumbers1NIST <- wavenumbersNIST[c(1:676)]
for(i in  1:length(rownames(range1NIST))){
plot(wavenumbers1NIST,
range1NIST[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(1700, 400),
ylim= c(0,0.1),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = 'raw spectra - ROI',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab ='absorbance (a.u.)')
range1NIST <- spectra.dfNIST[,c(1:676)]
wavenumbers1NIST <- wavenumbersNIST[c(1:676)]
for(i in  1:length(rownames(range1NIST))){
plot(wavenumbers1NIST,
range1NIST[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(1700, 400),
ylim= c(0,0.1),
type = 'l',
col ="black"
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = 'raw spectra - ROI',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab ='absorbance (a.u.)')
for(i in  1:length(rownames(spectra.dfNIST))){
plot(wavenumbersNIST,
spectra.dfNIST[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col ='black'
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = 'raw spectra full range',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab ='absorbance (a.u.)')
library(hyperSpec)
spcNIST <- new('hyperSpec',
spc= range1NIST,
wavelength = wavenumbers1NIST)
bendNIST <- 0.1 * wl.eval(spcNIST,
function (x) x^6+x^5+x^4+x^3+x^2,
normalize.wl = normalize01)
blNIST <- spc.rubberband(spcNIST+bendNIST, noise = 1e-4, df = 20)-bendNIST
sumaNIST <- spcNIST+bendNIST
spc3NIST <- spcNIST - blNIST
plot(spcNIST, wl.reverse = TRUE)
plot(bNISTl, add=TRUE, col=2,wl.reverse = TRUE)
library(hyperSpec)
spcNIST <- new('hyperSpec',
spc= range1NIST,
wavelength = wavenumbers1NIST)
bendNIST <- 0.1 * wl.eval(spcNIST,
function (x) x^6+x^5+x^4+x^3+x^2,
normalize.wl = normalize01)
blNIST <- spc.rubberband(spcNIST+bendNIST, noise = 1e-4, df = 20)-bendNIST
sumaNIST <- spcNIST+bendNIST
spc3NIST <- spcNIST - blNIST
plot(spcNIST, wl.reverse = TRUE)
plot(blNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(sumaNIST,wl.reverse = TRUE)
plot(bendNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(spc3NIST,wl.reverse = TRUE)
corrected1NIST  <- as.data.frame(spc3NIST[1:106])
library(hyperSpec)
spcNIST <- new('hyperSpec',
spc= range1NIST,
wavelength = wavenumbers1NIST)
bendNIST <- 0.1 * wl.eval(spcNIST,
function (x) x^5+x^4+x^3+x^2,
normalize.wl = normalize01)
blNIST <- spc.rubberband(spcNIST+bendNIST, noise = 1e-4, df = 20)-bendNIST
sumaNIST <- spcNIST+bendNIST
spc3NIST <- spcNIST - blNIST
plot(spcNIST, wl.reverse = TRUE)
plot(blNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(sumaNIST,wl.reverse = TRUE)
plot(bendNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(spc3NIST,wl.reverse = TRUE)
corrected1NIST  <- as.data.frame(spc3NIST[1:106])
library(hyperSpec)
spcNIST <- new('hyperSpec',
spc= range1NIST,
wavelength = wavenumbers1NIST)
bendNIST <- 0.1 * wl.eval(spcNIST,
function (x) x^4+x^3+x^2,
normalize.wl = normalize01)
blNIST <- spc.rubberband(spcNIST+bendNIST, noise = 1e-4, df = 20)-bendNIST
sumaNIST <- spcNIST+bendNIST
spc3NIST <- spcNIST - blNIST
plot(spcNIST, wl.reverse = TRUE)
plot(blNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(sumaNIST,wl.reverse = TRUE)
plot(bendNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(spc3NIST,wl.reverse = TRUE)
corrected1NIST  <- as.data.frame(spc3NIST[1:106])
library(hyperSpec)
spcNIST <- new('hyperSpec',
spc= range1NIST,
wavelength = wavenumbers1NIST)
bendNIST <- 0.1 * wl.eval(spcNIST,
function (x) x^6+x^5+x^4+x^3+x^2,
normalize.wl = normalize01)
blNIST <- spc.rubberband(spcNIST+bendNIST, noise = 1e-4, df = 20)-bendNIST
sumaNIST <- spcNIST+bendNIST
spc3NIST <- spcNIST - blNIST
plot(spcNIST, wl.reverse = TRUE)
plot(blNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(sumaNIST,wl.reverse = TRUE)
plot(bendNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(spc3NIST,wl.reverse = TRUE)
corrected1NIST  <- as.data.frame(spc3NIST[1:106])
View(spc3NIST)
View(spc3NIST)
View(spc3)
library(hyperSpec)
spcNIST <- new('hyperSpec',
spc= range1NIST,
wavelength = wavenumbers1NIST)
bendNIST <- 0.1 * wl.eval(spcNIST,
function (x) x^6+x^5+x^4+x^3+x^2,
normalize.wl = normalize01)
blNIST <- spc.rubberband(spcNIST+bendNIST, noise = 1e-4, df = 20)-bendNIST
sumaNIST <- spcNIST+bendNIST
spc3NIST <- spcNIST - blNIST
plot(spcNIST, wl.reverse = TRUE)
plot(blNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(sumaNIST,wl.reverse = TRUE)
plot(bendNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(spc3NIST,wl.reverse = TRUE)
corrected1NIST  <- as.data.frame(spc3NIST[1:5])
correctedNIST <- as.data.frame(corrected1NIST[,1])
correctedNIST <- correctedNIST + (min(correctedNIST)*-1) # shifting upwards to prevent negative values
View(listOfModels)
listOfNISTPredictions <- vector('list', length = length(listOfModels))
View(as.data.frame(correctedNIST))
listOfNISTPredictions <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfModels)){
listOfNISTPredictions[[i]] <- predict(listOfModels[[i]], newdata = as.data.frame(correctedNIST))
}
listOfNISTPredictions[[1]]
listOfNISTPredictions[[8]]
listOfNISTPredictions[[1]]
listOfNISTPredictions[[2]]
listOfNISTPredictions[[3]]
listOfNISTPredictions[[4]]
listOfNISTPredictions[[5]]
listOfNISTPredictions[[6]]
listOfNISTErrors <- abs(listOfNISTPredictions-400)/400
length(listOfNISTPredictions)
for(i in 1:length(listOfNISTPredictions))
listOfNISTErrors[[i]] <- abs(listOfNISTPredictions[[i]]-400)/400
listOfNISTErrors <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfNISTPredictions))
listOfNISTErrors[[i]] <- abs(listOfNISTPredictions[[i]]-400)/400
listOfNISTErrors
listOfNISTErrors <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfNISTPredictions))
listOfNISTErrors[[i]] <- (abs(listOfNISTPredictions[[i]]-400)/400)*100
listOfNISTErrors
View(LeavesSi)
min(LeavesSi[,2])
max(LeavesSi[,2])
View(leavesSiSpectra)
which(rownames(leavesSiSpectra) == 202)
leavesSiSpectra <- corrected[metadata.leaves.Si$spectra.index,]
for (i in 18){
plot(as.numeric(colnames(leavesSiSpectra)),
leavesSiSpectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.06))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
listOfNISTPredictions
listOfMeansNIST <- lapply(listOfNISTPredictions, mean)
listOfMeansNIST
gen$bestsets[1,]
colnames(leavesSiSpectra[1,])
colnames(leavesSiSpectra[,gen$bestsets[1,]])
par(mfrow=c(3,4))
for(j in 1:nrow(gen$bestsets)){
for (i in 1:length(rownames(leavesSiSpectra))){
plot(as.numeric(colnames(leavesSiSpectra)),
leavesSiSpectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.06))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = paste(as.character(c(4:15)[j]),'variables'),
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
abline(v = as.numeric(colnames(leavesSiSpectra)[gen$bestsets[j,]]),
col = 2,
lty = 2)
}
View(metadata)
min(metadata$Si)
min(metadata$Si)
min(LeavesSi[,2])
max(LeavesSi[,2])
median(listOfRMSEP[[1]])
10687.99*(100/10e6)
View(leavesSiSpectra)
compare
