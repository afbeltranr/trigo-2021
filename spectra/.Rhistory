# # as independent variable
# model <- train(Si ~., data = marketing,
#                method = "lm",
#                trControl = train_control)
#
# # printing model performance metrics
# # along with other details
# print(model)
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP, fill=variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")
dp + scale_fill_brewer(palette="Blues") + theme_minimal()
par(mfrow=c(3,4))
for(j in 1:nrow(gen$bestsets)){
for (i in 1:length(rownames(leavesSiSpectra))){
plot(as.numeric(colnames(leavesSiSpectra)),
leavesSiSpectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.06))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = paste(as.character(c(4:15)[j]),'variables'),
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
abline(v = as.numeric(colnames(leavesSiSpectra)[gen$bestsets[j,]]),
col = 2,
lty = 2)
}
which(is.na(metadata.straw$Si))
which(is.na(metadata.straw$spectra))
metadata.straw$sample[c(11,19,20,21,22)]
par(mfrow=c(3,4))
for(j in 1:nrow(gen$bestsets)){
for (i in 1:length(rownames(leavesSiSpectra))){
plot(as.numeric(colnames(leavesSiSpectra)),
leavesSiSpectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.06))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = paste(as.character(c(4:15)[j]),'variables'),
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
abline(v = as.numeric(colnames(leavesSiSpectra)[gen$bestsets[j,]]),
col = 2,
lty = 2)
}
listOfStrawPredictions <-  vector('list', length = length(listOfModels))
for(i in 1:length(listOfModels)){
listOfStrawPredictions[[i]] <- predict(listOfModels[[i]], newdata = as.data.frame(StrawSiSpectra))
}
listOfStrawErrors <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfStrawErrors)){
listOfStrawErrors[[i]] <- (abs(listOfStrawPredictions[[i]]-metadataStrawSi$Si)/metadataStrawSi$Si)*100
}
listOfStrawErrors <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfStrawErrors)){
listOfStrawErrors[[i]] <- (abs(listOfStrawPredictions[[i]]-metadataStrawSi$Si)/metadataStrawSi$Si)*100
}
# First, we have a list. we have to convert this list to a data.frame. with one column of errors and one column of model identifier:
vectorOfStrawErrors <- unlist(listOfStrawErrors)
StrawErrorsdf <- data.frame(error = vectorOfStrawErrors, model= as.factor(rep(4:12,each =20)))
dp <- ggplot(StrawErrorsdf, aes(x= model, y=error, fill=model)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="error of prediction for straw samples",x="# of variables selected", y = "relative error (n=20)")
dp + scale_fill_brewer(palette="Blues") + theme_minimal() + geom_hline(yintercept=100)
listOfStrawPredictions <-  vector('list', length = length(listOfModels))
for(i in 1:length(listOfModels)){
listOfStrawPredictions[[i]] <- predict(listOfModels[[i]], newdata = as.data.frame(StrawSiSpectra[,gen$bestsets[i,]]))
}
listOfStrawErrors <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfStrawErrors)){
listOfStrawErrors[[i]] <- (abs(listOfStrawPredictions[[i]]-metadataStrawSi$Si)/metadataStrawSi$Si)*100
}
# First, we have a list. we have to convert this list to a data.frame. with one column of errors and one column of model identifier:
vectorOfStrawErrors <- unlist(listOfStrawErrors)
StrawErrorsdf <- data.frame(error = vectorOfStrawErrors, model= as.factor(rep(4:12,each =20)))
dp <- ggplot(StrawErrorsdf, aes(x= model, y=error, fill=model)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="error of prediction for straw samples",x="# of variables selected", y = "relative error (n=20)")
dp + scale_fill_brewer(palette="Blues") + theme_minimal() + geom_hline(yintercept=100)
listOfRootsPredictions <-  vector('list', length = length(listOfModels))
for(i in 1:length(listOfModels)){
listOfRootsPredictions[[i]] <- predict(listOfModels[[i]], newdata = as.data.frame(RootsSiSpectra))
}
listOfRootsErrors <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfRootsErrors)){
listOfRootsErrors[[i]] <- (abs(listOfRootsPredictions[[i]]-metadataRootsSi$Si)/metadataRootsSi$Si)*100
}
# First, we have a list. we have to convert this list to a data.frame. with one column of errors and one column of model identifier:
vectorOfRootsErrors <- unlist(listOfRootsErrors)
RootsErrorsdf <- data.frame(error = vectorOfRootsErrors, model= as.factor(rep(4:12,each = 16)))
dp <- ggplot(RootsErrorsdf, aes(x= model, y=error, fill=model)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="error of prediction for Roots samples",x="# of variables selected", y = "relative error (n=20)")
dp + scale_fill_brewer(palette="Blues") + theme_minimal() + geom_hline(yintercept=100)
View(metadata.straw)
View(min(metadata.straw))
View(min(metadata.straw$Si))
min(metadata.straw$Si)
min(na.omit(metadata.straw$Si))
max(na.omit(metadata.straw$Si))
max(na.omit(metadata.leaves.Si$Si))
min(na.omit(metadata.leaves.Si$Si))
boxplot(na.omit(metadata.straw$Si))
boxplot(na.omit(metadata.leaves$Si))
boxplot(na.omit(metadata.straw$Si))
boxplot(na.omit(metadataRootsSi$Si))
boxplot(na.omit(metadata.straw$Si))
boxplot(na.omit(metadata.leaves$Si))
library(car)
qqPlot(metadata.leaves$Si)
corleaves <- cor(leavesSiSpectra)
image(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
cor,
col=heat_hcl(100),
axes=FALSE,
xlab="",
ylab="",
xlim=c(1700,400),
ylim=c(1700,400))
corleaves <- cor(leavesSiSpectra)
image(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
col=heat_hcl(100),
axes=FALSE,
xlab="",
ylab="",
xlim=c(1700,400),
ylim=c(1700,400))
library(colorRamps)
library(colorspace)
library(colorRamps)
library(colorspace)
corleaves <- cor(leavesSiSpectra)
image(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
col=heat_hcl(100),
axes=FALSE,
xlab="",
ylab="",
xlim=c(1700,400),
ylim=c(1700,400))
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
add=TRUE,
col="black",
xlab="",
ylab="",
labcex=1.1,
ylim=c(1700,400),
labels=""
)
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
lty=0,
labcex=1.3,
add=TRUE,
col="black",
vfont=c("sans serif", "bold italic"),
nlevels=15
)
axis(1)
axis(2)
box()
library(colorRamps)
library(colorspace)
library(viridis)
corleaves <- cor(leavesSiSpectra)
image(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
col=viridis(100),
axes=FALSE,
xlab="",
ylab="",
xlim=c(1700,400),
ylim=c(1700,400))
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
add=TRUE,
col="black",
xlab="",
ylab="",
labcex=1.1,
ylim=c(1700,400),
labels=""
)
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
lty=0,
labcex=1.3,
add=TRUE,
col="black",
vfont=c("sans serif", "bold italic"),
nlevels=15
)
axis(1)
axis(2)
box()
library(colorRamps)
library(colorspace)
library(viridis)
corleaves <- cov(leavesSiSpectra)
image(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
col=viridis(100),
axes=FALSE,
xlab="",
ylab="",
xlim=c(1700,400),
ylim=c(1700,400))
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
add=TRUE,
col="black",
xlab="",
ylab="",
labcex=1.1,
ylim=c(1700,400),
labels=""
)
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
lty=0,
labcex=1.3,
add=TRUE,
col="black",
vfont=c("sans serif", "bold italic"),
nlevels=15
)
axis(1)
axis(2)
box()
library(colorRamps)
library(colorspace)
library(viridis)
corleaves <- cov(leavesSiSpectra)
image(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
col=viridis(100),
axes=FALSE,
xlab="",
ylab="",
xlim=c(1700,400),
ylim=c(1700,400))
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
add=TRUE,
col="black",
xlab="",
ylab="",
labcex=1.1,
ylim=c(1700,400),
labels=""
)
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
lty=0,
labcex=1.3,
add=TRUE,
col="black",
vfont=c("sans serif", "bold italic"),
nlevels=2
)
axis(1)
axis(2)
box()
library(colorRamps)
library(colorspace)
library(viridis)
corleaves <- cor(leavesSiSpectra)
image(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
col=viridis(100),
axes=FALSE,
xlab="",
ylab="",
xlim=c(1700,400),
ylim=c(1700,400))
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
add=TRUE,
col="black",
xlab="",
ylab="",
labcex=1.1,
ylim=c(1700,400),
labels=""
)
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
lty=0,
labcex=1.3,
add=TRUE,
col="black",
vfont=c("sans serif", "bold italic"),
nlevels=2
)
axis(1)
axis(2)
box()
library(colorRamps)
library(colorspace)
library(viridis)
corleaves <- cor(leavesSiSpectra)
image(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
col=viridis(100),
axes=FALSE,
xlab="",
ylab="",
xlim=c(1700,400),
ylim=c(1700,400))
# contour(as.numeric(colnames(leavesSiSpectra)),
# 	    as.numeric(colnames(leavesSiSpectra)),
# 	    corleaves,
# 	    add=TRUE,
# 	    col="black",
# 	    xlab="",
# 	    ylab="",
# 	    labcex=1.1,
# 	    ylim=c(1700,400),
# 	    labels=""
# 	)
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
lty=0,
labcex=1.3,
add=TRUE,
col="black",
vfont=c("sans serif", "bold italic"),
nlevels=2
)
axis(1)
axis(2)
box()
library(colorRamps)
library(colorspace)
library(viridis)
corleaves <- cov(leavesSiSpectra)
image(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
col=viridis(100),
axes=FALSE,
xlab="",
ylab="",
xlim=c(1700,400),
ylim=c(1700,400))
# contour(as.numeric(colnames(leavesSiSpectra)),
# 	    as.numeric(colnames(leavesSiSpectra)),
# 	    corleaves,
# 	    add=TRUE,
# 	    col="black",
# 	    xlab="",
# 	    ylab="",
# 	    labcex=1.1,
# 	    ylim=c(1700,400),
# 	    labels=""
# 	)
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
lty=0,
labcex=1.3,
add=TRUE,
col="black",
vfont=c("sans serif", "bold italic"),
nlevels=2
)
axis(1)
axis(2)
box()
library(colorRamps)
library(colorspace)
library(viridis)
corleaves <- cov(leavesSiSpectra)
image(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
col=viridis(100),
axes=FALSE,
xlab="",
ylab="",
xlim=c(1700,400),
ylim=c(1700,400))
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
add=TRUE,
col="white",
xlab="",
ylab="",
labcex=1.1,
ylim=c(1700,400),
labels=""
)
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
lty=0,
labcex=1.3,
add=TRUE,
col="black",
vfont=c("sans serif", "bold italic"),
nlevels=2
)
axis(1)
axis(2)
box()
library(colorRamps)
library(colorspace)
library(viridis)
corleaves <- cov(leavesSiSpectra)
image(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
col=viridis(100),
axes=FALSE,
xlab="",
ylab="",
xlim=c(1700,400),
ylim=c(1700,400))
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
add=TRUE,
col="black",
xlab="",
ylab="",
labcex=1.1,
ylim=c(1700,400),
labels=""
)
contour(as.numeric(colnames(leavesSiSpectra)),
as.numeric(colnames(leavesSiSpectra)),
corleaves,
lty=0,
labcex=1.3,
add=TRUE,
col="black",
vfont=c("sans serif", "bold italic"),
nlevels=2
)
axis(1)
axis(2)
box()
View(metadata)
str(metadata)
str(corrected[metadata$spectra.index,])
dim(corrected[metadata$spectra.index,])
is.na(metadata$spectra)
which(is.na(metadata$spectra))
which(is.na(metadata$class))
which(is.na(metadata$Si))
unique(c(which(is.na(metadata$spectra))),
which(is.na(metadata$class)),
which(is.na(metadata$Si)))
unique(
c( which(is.na(metadata$spectra)),
which(is.na(metadata$class)),
which(is.na(metadata$Si)))
)
unique(
c( which(is.na(metadata$spectra)),
which(is.na(metadata$class)),
which(is.na(metadata$Si)))
)
missing <- unique(
c( which(is.na(metadata$spectra)),
which(is.na(metadata$class)),
which(is.na(metadata$Si)))
)
metadata.class <- metadata[-missing,]
View(metadata.class)
