ylim = c(0,0.1))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste(
'Wave number (cm'^'-1',
')'
)
),
ylab = 'Absorbance (a.u.)')
leavesSiSpectra <-
as.matrix(leavesSiSpectra)
SiTable <-
data.frame(Si = I(metadata.leaves.Si$Si),
spectra = I(leavesSiSpectra) )
newRange <-
leavesSiSpectra[,c(261:676)]
colnames( leavesSiSpectra[,c(261,676)])
library(mdatools)
LeavesPLS <- pls(leavesSiSpectra,
SiTable$Si,
10,
cv =1)
summary(LeavesPLS)
summary(LeavesPLS$res$cal)
plot(LeavesPLS)
par(mfrow=c(2,2))
plotXVariance(LeavesPLS)
plotXCumVariance(LeavesPLS)
plotYVariance(LeavesPLS)
plotYCumVariance(LeavesPLS)
library(subselect)
Hmat <- lmHmat(leavesSiSpectra,
metadata.leaves.Si$Si)
gen <- genetic(Hmat$mat,
kmin =5,
kmax = 16,
H= Hmat$H,
r =1,
crit = 'CCR12',
force = T)
par(mfrow=c(3,3))
for(j in 1:nrow(gen$bestsets)){
for (i in 1:length(rownames(leavesSiSpectra))){
plot(as.numeric(colnames(leavesSiSpectra)),
leavesSiSpectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.06))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = paste(
as.character(c(4:15)[j]),
'variables'),
xlab = expression(
paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
abline(v = as.numeric(
colnames(
leavesSiSpectra
)[gen$bestsets[j,]]),
col = 2,
lty = 2)
}
library(mdatools)
LeavesPLS <-
pls(leavesSiSpectra[,gen$bestsets[4,]],
SiTable$Si,
10,
cv =1)
plot(LeavesPLS)
summary(LeavesPLS)
listOfPredictions1 <- vector('list', length = nrow(gen$bestsets))
listOfModels1 <- vector('list', length = nrow(gen$bestsets))
for(i in 1:nrow(gen$bestsets)){
listOfModels1[[i]] <- lm(metadata.leaves.Si$Si ~ leavesSiSpectra[,gen$bestsets[i,]], y = T, x = T)
}
for(i in 1:nrow(gen$bestsets)){
listOfPredictions1[[i]] <- predict(listOfModels1[[i]],  newdata = as.data.frame(leavesSiSpectra[,gen$bestsets[i,]]))
}
ActualSi <- SiTable$Si
win.graph()
for(i in 1:nrow(gen$bestsets)){
plot(ActualSi,
listOfPredictions1[[i]],
xlab="Actual Si (ppm)" ,
ylab="Predicted Si (ppm)",
pch=17,
cex=1.2,
col="darkorchid4",
cex.lab=1
)
abline(a=0  , b=1, col=1, lty=1, lwd=2)
readline('press enter')
par(new = F)
}
residualsT <- c(listOfModels1[[1]]$residuals,
listOfModels1[[2]]$residuals,
listOfModels1[[3]]$residuals,
listOfModels1[[4]]$residuals,
listOfModels1[[5]]$residuals,
listOfModels1[[6]]$residuals,
listOfModels1[[7]]$residuals,
listOfModels1[[8]]$residuals,
listOfModels1[[9]]$residuals)
VariablesResiduals <- c(rep(4,23),
rep(5,23),
rep(6,23),
rep(7,23),
rep(8,23),
rep(9,23),
rep(10,23),
rep(11,23),
rep(12,23)
)
ResidualsTable <- data.frame(Residuals = residualsT, Variables = VariablesResiduals)
ResidualsTable$Variables <- as.factor(ResidualsTable$Variables)
dp1 <- ggplot(ResidualsTable, aes(x=Variables, y= Residuals, fill=Variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="",x="# of variables selected", y = "Residuals (mg/kg)")
dp1 + scale_fill_brewer(palette="Greens") + theme_minimal()
win.graph()
pValTable <- data.frame(matrix(nrow = 9, ncol = 12))
summary(listOfModels1[[1]])$coefficients[,4]
win.graph()
par(mfrow = c(3,3))
for(i in 1:9){
barplot(summary(listOfModels1[[i]])$coefficients[,4],
horiz = T,
names.arg = c('intercept', colnames(leavesSiSpectra[,gen$bestsets[i,]])))
abline(v = 0.05, lty =2)
}
library(tidyverse)
library(caret)
# First we create a list of tables with the best subsets selected by the genetic algorithm
listOfTables <- vector('list', nrow(gen$bestsets))
listOfModels <- vector('list', nrow(gen$bestsets))
listOfRMSEP <- vector('list', nrow(gen$bestsets))
system.time(
for(i in 1:nrow(gen$bestsets)){
listOfTables[[i]] <- cbind(Si  = metadata.leaves.Si$Si, as.data.frame(leavesSiSpectra[,gen$bestsets[i,]]))
# setting seed to generate a
# reproducible random sampling
set.seed(125)
# defining training control as
# repeated cross-validation and
# value of K is 10 and repetition is 100 times
train_control <- trainControl(method = "repeatedcv",
number = 10, repeats = 100)
# training the model by assigning sales column
# as target variable and rest other column
# as independent variable
listOfModels[[i]] <- train(Si ~.,
data = listOfTables[[i]],
method = "lm",
trControl = train_control)
listOfRMSEP[[i]] <- listOfModels[[i]]$resample$RMSE
}
)
RMSEP <- c(listOfRMSEP[[1]],listOfRMSEP[[2]],listOfRMSEP[[3]],listOfRMSEP[[4]],listOfRMSEP[[5]],listOfRMSEP[[6]],listOfRMSEP[[7]],listOfRMSEP[[8]],listOfRMSEP[[9]])
RMSEPTable <- data.frame(RMSEP = RMSEP, variables = c(rep(4,1000),rep(5,1000),rep(6,1000),rep(7,1000),rep(8,1000),rep(9,1000),rep(10,1000),rep(11,1000),rep(12,1000)))
RMSEPTable$variables <- as.factor(RMSEPTable$variables)
# # R program to implement
# # repeated K-fold cross-validation
#
# # setting seed to generate a
# # reproducible random sampling
# set.seed(125)
#
# # defining training control as
# # repeated cross-validation and
# # value of K is 10 and repetation is 3 times
# train_control <- trainControl(method = "repeatedcv",
#                             number = 10, repeats = 3)
#
# # training the model by assigning sales column
# # as target variable and rest other column
# # as independent variable
# model <- train(Si ~., data = marketing,
#                method = "lm",
#                trControl = train_control)
#
# # printing model performance metrics
# # along with other details
# print(model)
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP, fill=variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")
dp + scale_fill_brewer(palette="Blues") + theme_minimal()
View(range1)
colnames(spectra.df)
str(colnames(spetra.df))
str(colnames(spectra.df))
colnames(spectra.df)[996]
colnames(spectra.df)[1700]
colnames(spectra.df)[1400]
colnames(spectra.df)[1500]
colnames(spectra.df)[100]
colnames(spectra.df)[1600]
colnames(spectra.df)[1600]
colnames(spectra.df)[1400]
max(spectra.df[1400:1600])
which.max(spectra.df[1400:1600])
which.max(spectra.df[1,1400:1600])
for(i in  1:length(rownames(spectra.df))){
plot(wavenumbers,
spectra.df[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
abline(v = 3327)
win.graph()
for(i in  1:length(rownames(spectra.df))){
plot(wavenumbers,
spectra.df[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
abline(v = 3327)
win.graph()
for(i in  1:length(rownames(spectra.df))){
plot(wavenumbers,
spectra.df[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
abline(v = 3327)
which.max(spectra.df[1400:1600])
colnames(spectra.df[1400])
win.graph()
for(i in  1:length(rownames(spectra.df))){
plot(wavenumbers,
spectra.df[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
abline(v = 3327)
which.max(spectra.df[1,1400:1600])
colnames(spectra.df[1400])
win.graph()
for(i in  1:1){
plot(wavenumbers,
spectra.df[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
abline(v = 3327)
colnames(spectra.df[1400])
colnames(spectra.df[1300])
which.max(spectra.df[1,1300:1400])
abline(v = 2917.817)
which.max(spectra.df[1,1315:1400])
which.max(spectra.df[1,1310:1400])
colnames(spectra.df[1310])
which.max(spectra.df[1,1300:1391])
which.max(spectra.df[1,1300:1380])
colnames(spectra.df[1300])
colnames(spectra.df[1380])
colnames(spectra.df[1305])
colnames(spectra.df[1306])
abline(v = 2915.888)
which.max(spectra.df[1,1200:1391])
which.max(spectra.df[1,1200:1300])
abline(v =2904.317 )
colnames(spectra.df[1260])
abline(v =2827.177 )
colnames(spectra.df[1280])
abline(v =2865.748)
which.max(1260:1250)
which.max(spectra.df[1,1260:1250])
win.graph
for(i in  1:length(rownames(spectra.df))){
plot(wavenumbers,
spectra.df[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
abline(v = 3327)
win.graph()
for(i in  1:length(rownames(spectra.df))){
plot(wavenumbers,
spectra.df[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
abline(v = 3327)
win.graph()
for(i in  1:length(rownames(spectra.df))){
plot(wavenumbers,
spectra.df[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
abline(v = 3327)
win.graph()
for(i in  1:length(rownames(spectra.df))){
plot(wavenumbers,
spectra.df[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
abline(v = 3327)
win.graph()
for(i in  1:length(rownames(spectra.df))){
plot(wavenumbers,
spectra.df[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
abline(v = 3327)
abline(v = 2917.817)
which.max(spectra.df[1,1260:1250])
abline(v = 2827.177)
abline(v = 2830)
abline(v = 2880)
abline(v = 2850)
win.graph()
for(i in  1:length(rownames(spectra.df))){
plot(wavenumbers,
spectra.df[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
abline(v = 3327)
