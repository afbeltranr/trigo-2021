col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = 'raw spectra - ROI',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab ='absorbance (a.u.)')
range1NIST <- spectra.dfNIST[,c(1:676)]
wavenumbers1NIST <- wavenumbersNIST[c(1:676)]
for(i in  1:length(rownames(range1NIST))){
plot(wavenumbers1NIST,
range1NIST[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(1700, 400),
ylim= c(0,0.1),
type = 'l',
col ="black"
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = 'raw spectra - ROI',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab ='absorbance (a.u.)')
for(i in  1:length(rownames(spectra.dfNIST))){
plot(wavenumbersNIST,
spectra.dfNIST[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col ='black'
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = 'raw spectra full range',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab ='absorbance (a.u.)')
library(hyperSpec)
spcNIST <- new('hyperSpec',
spc= range1NIST,
wavelength = wavenumbers1NIST)
bendNIST <- 0.1 * wl.eval(spcNIST,
function (x) x^6+x^5+x^4+x^3+x^2,
normalize.wl = normalize01)
blNIST <- spc.rubberband(spcNIST+bendNIST, noise = 1e-4, df = 20)-bendNIST
sumaNIST <- spcNIST+bendNIST
spc3NIST <- spcNIST - blNIST
plot(spcNIST, wl.reverse = TRUE)
plot(bNISTl, add=TRUE, col=2,wl.reverse = TRUE)
library(hyperSpec)
spcNIST <- new('hyperSpec',
spc= range1NIST,
wavelength = wavenumbers1NIST)
bendNIST <- 0.1 * wl.eval(spcNIST,
function (x) x^6+x^5+x^4+x^3+x^2,
normalize.wl = normalize01)
blNIST <- spc.rubberband(spcNIST+bendNIST, noise = 1e-4, df = 20)-bendNIST
sumaNIST <- spcNIST+bendNIST
spc3NIST <- spcNIST - blNIST
plot(spcNIST, wl.reverse = TRUE)
plot(blNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(sumaNIST,wl.reverse = TRUE)
plot(bendNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(spc3NIST,wl.reverse = TRUE)
corrected1NIST  <- as.data.frame(spc3NIST[1:106])
library(hyperSpec)
spcNIST <- new('hyperSpec',
spc= range1NIST,
wavelength = wavenumbers1NIST)
bendNIST <- 0.1 * wl.eval(spcNIST,
function (x) x^5+x^4+x^3+x^2,
normalize.wl = normalize01)
blNIST <- spc.rubberband(spcNIST+bendNIST, noise = 1e-4, df = 20)-bendNIST
sumaNIST <- spcNIST+bendNIST
spc3NIST <- spcNIST - blNIST
plot(spcNIST, wl.reverse = TRUE)
plot(blNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(sumaNIST,wl.reverse = TRUE)
plot(bendNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(spc3NIST,wl.reverse = TRUE)
corrected1NIST  <- as.data.frame(spc3NIST[1:106])
library(hyperSpec)
spcNIST <- new('hyperSpec',
spc= range1NIST,
wavelength = wavenumbers1NIST)
bendNIST <- 0.1 * wl.eval(spcNIST,
function (x) x^4+x^3+x^2,
normalize.wl = normalize01)
blNIST <- spc.rubberband(spcNIST+bendNIST, noise = 1e-4, df = 20)-bendNIST
sumaNIST <- spcNIST+bendNIST
spc3NIST <- spcNIST - blNIST
plot(spcNIST, wl.reverse = TRUE)
plot(blNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(sumaNIST,wl.reverse = TRUE)
plot(bendNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(spc3NIST,wl.reverse = TRUE)
corrected1NIST  <- as.data.frame(spc3NIST[1:106])
library(hyperSpec)
spcNIST <- new('hyperSpec',
spc= range1NIST,
wavelength = wavenumbers1NIST)
bendNIST <- 0.1 * wl.eval(spcNIST,
function (x) x^6+x^5+x^4+x^3+x^2,
normalize.wl = normalize01)
blNIST <- spc.rubberband(spcNIST+bendNIST, noise = 1e-4, df = 20)-bendNIST
sumaNIST <- spcNIST+bendNIST
spc3NIST <- spcNIST - blNIST
plot(spcNIST, wl.reverse = TRUE)
plot(blNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(sumaNIST,wl.reverse = TRUE)
plot(bendNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(spc3NIST,wl.reverse = TRUE)
corrected1NIST  <- as.data.frame(spc3NIST[1:106])
View(spc3NIST)
View(spc3NIST)
View(spc3)
library(hyperSpec)
spcNIST <- new('hyperSpec',
spc= range1NIST,
wavelength = wavenumbers1NIST)
bendNIST <- 0.1 * wl.eval(spcNIST,
function (x) x^6+x^5+x^4+x^3+x^2,
normalize.wl = normalize01)
blNIST <- spc.rubberband(spcNIST+bendNIST, noise = 1e-4, df = 20)-bendNIST
sumaNIST <- spcNIST+bendNIST
spc3NIST <- spcNIST - blNIST
plot(spcNIST, wl.reverse = TRUE)
plot(blNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(sumaNIST,wl.reverse = TRUE)
plot(bendNIST, add=TRUE, col=2,wl.reverse = TRUE)
plot(spc3NIST,wl.reverse = TRUE)
corrected1NIST  <- as.data.frame(spc3NIST[1:5])
correctedNIST <- as.data.frame(corrected1NIST[,1])
correctedNIST <- correctedNIST + (min(correctedNIST)*-1) # shifting upwards to prevent negative values
View(listOfModels)
listOfNISTPredictions <- vector('list', length = length(listOfModels))
View(as.data.frame(correctedNIST))
listOfNISTPredictions <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfModels)){
listOfNISTPredictions[[i]] <- predict(listOfModels[[i]], newdata = as.data.frame(correctedNIST))
}
listOfNISTPredictions[[1]]
listOfNISTPredictions[[8]]
listOfNISTPredictions[[1]]
listOfNISTPredictions[[2]]
listOfNISTPredictions[[3]]
listOfNISTPredictions[[4]]
listOfNISTPredictions[[5]]
listOfNISTPredictions[[6]]
listOfNISTErrors <- abs(listOfNISTPredictions-400)/400
length(listOfNISTPredictions)
for(i in 1:length(listOfNISTPredictions))
listOfNISTErrors[[i]] <- abs(listOfNISTPredictions[[i]]-400)/400
listOfNISTErrors <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfNISTPredictions))
listOfNISTErrors[[i]] <- abs(listOfNISTPredictions[[i]]-400)/400
listOfNISTErrors
listOfNISTErrors <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfNISTPredictions))
listOfNISTErrors[[i]] <- (abs(listOfNISTPredictions[[i]]-400)/400)*100
listOfNISTErrors
View(LeavesSi)
min(LeavesSi[,2])
max(LeavesSi[,2])
View(leavesSiSpectra)
which(rownames(leavesSiSpectra) == 202)
leavesSiSpectra <- corrected[metadata.leaves.Si$spectra.index,]
for (i in 18){
plot(as.numeric(colnames(leavesSiSpectra)),
leavesSiSpectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.06))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
listOfNISTPredictions
listOfMeansNIST <- lapply(listOfNISTPredictions, mean)
listOfMeansNIST
gen$bestsets[1,]
colnames(leavesSiSpectra[1,])
colnames(leavesSiSpectra[,gen$bestsets[1,]])
par(mfrow=c(3,4))
for(j in 1:nrow(gen$bestsets)){
for (i in 1:length(rownames(leavesSiSpectra))){
plot(as.numeric(colnames(leavesSiSpectra)),
leavesSiSpectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.06))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = paste(as.character(c(4:15)[j]),'variables'),
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
abline(v = as.numeric(colnames(leavesSiSpectra)[gen$bestsets[j,]]),
col = 2,
lty = 2)
}
View(metadata)
min(metadata$Si)
min(metadata$Si)
min(LeavesSi[,2])
max(LeavesSi[,2])
median(listOfRMSEP[[1]])
10687.99*(100/10e6)
View(leavesSiSpectra)
compare
View(metadata)
View(metadata.leaves)
straw.index <- which(grepl(paste0('(?=.*','S',')'),metadata$class,perl = T))
straw.index
metadata.straw <- metadata[straw.index,]
head(metadata.straw)
which(is.na(metadata.straw$si))
which(is.na(metadata.straw$spectra))
metadata.straw$sample[11]
View(metadata.straw)
which(is.na(metadata.straw$Si))
which(is.na(metadata.straw$spectra))
metadata.straw$sample[c(11,19,20,21,22)]
metadataStrawSi <- metadata.straw[-c(11,19,20,21,22),]
View(metadataStrawSi)
StrawSiSpectra <- corrected[metadataStrawSi$spectra.index,]
View(StrawSiSpectra)
View(metadataStrawSi)
StrawSiSpectra <- corrected[metadataStrawSi$spectra.index,]
or (i in 1:length(rownames(StrawSiSpectra))){
StrawSiSpectra <- corrected[metadataStrawSi$spectra.index,]
for (i in 1:length(rownames(StrawSiSpectra))){
plot(as.numeric(colnames(StrawSiSpectra)),
StrawSiSpectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.06))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
listOfStrawPredictions <-  vector('list', length = length(listOfModels))
for(i in 1:length(listOfModels)){
listOfNISTPredictions[[i]] <- predict(listOfModels[[i]], newdata = as.data.frame(StrawSiSpectra))
}
metadataStrawSi$Si
listOfStrawErrors <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfStrawErrors)){
listOfStrawErrors[[i]] <- (abs(listOfStrawPredictions[[i]]-metadataStrawSi$Si)/metadataStrawSi$Si)*100
}
listOfStrawPredictions <-  vector('list', length = length(listOfModels))
for(i in 1:length(listOfModels)){
listOfStrawPredictions[[i]] <- predict(listOfModels[[i]], newdata = as.data.frame(StrawSiSpectra))
}
listOfStrawErrors <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfStrawErrors)){
listOfStrawErrors[[i]] <- (abs(listOfStrawPredictions[[i]]-metadataStrawSi$Si)/metadataStrawSi$Si)*100
}
listOfStrawErrors
min(listOfStrawErrors)
min(listOfStrawErrors[[1]])
min(listOfStrawErrors[[12]])
min(listOfStrawErrors[[9]])
min(listOfStrawErrors[[10]])
length(listOfStrawErrors)
minimumErrorsStraw <- vector('list',9)
for(i in 1:9){
minimumErrorsStraw[[i]] <- min(listOfStrawErrors)
}
minimumErrorsStraw <- vector('list',9)
for(i in 1:9){
minimumErrorsStraw[[i]] <- min(listOfStrawErrors[[i]])
}
minimumErrorsStraw
unlist(listOfStrawErrors)
vectorOfStrawErrors <- unlist(listOfStrawErrors)
length(vectorOfStrawErrors)
rep(4:12,each =20)
vectorOfStrawErrors <- unlist(listOfStrawErrors)
StrawErrorsdf <- data.frame(error = vectorOfStrawErrors, model= as.factor(rep(4:12,each =20)))
# First, we have a list. we have to convert this list to a data.frame. with one column of errors and one column of model identifier:
vectorOfStrawErrors <- unlist(listOfStrawErrors)
StrawErrorsdf <- data.frame(error = vectorOfStrawErrors, model= as.factor(rep(4:12,each =20)))
dp <- ggplot(StrawErrorsdf, aes(x= model, y=error, fill=model)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")
dp + scale_fill_brewer(palette="Blues") + theme_minimal()
# First, we have a list. we have to convert this list to a data.frame. with one column of errors and one column of model identifier:
vectorOfStrawErrors <- unlist(listOfStrawErrors)
StrawErrorsdf <- data.frame(error = vectorOfStrawErrors, model= as.factor(rep(4:12,each =20)))
dp <- ggplot(StrawErrorsdf, aes(x= model, y=error, fill=model)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="CVRMSE vs # of variables ",x="# of variables selected", y = "RMSE (n = 1000)")
dp + scale_fill_brewer(palette="Blues") + theme_minimal() + geom_hline(yintercept=100)
# First, we have a list. we have to convert this list to a data.frame. with one column of errors and one column of model identifier:
vectorOfStrawErrors <- unlist(listOfStrawErrors)
StrawErrorsdf <- data.frame(error = vectorOfStrawErrors, model= as.factor(rep(4:12,each =20)))
dp <- ggplot(StrawErrorsdf, aes(x= model, y=error, fill=model)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="error of prediction for straw samples",x="# of variables selected", y = "relative error (n=20)")
dp + scale_fill_brewer(palette="Blues") + theme_minimal() + geom_hline(yintercept=100) +annotate(geom="text", x=12.5, y=101, label="100%",
color="red")
# First, we have a list. we have to convert this list to a data.frame. with one column of errors and one column of model identifier:
vectorOfStrawErrors <- unlist(listOfStrawErrors)
StrawErrorsdf <- data.frame(error = vectorOfStrawErrors, model= as.factor(rep(4:12,each =20)))
dp <- ggplot(StrawErrorsdf, aes(x= model, y=error, fill=model)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="error of prediction for straw samples",x="# of variables selected", y = "relative error (n=20)")
dp + scale_fill_brewer(palette="Blues") + theme_minimal() + geom_hline(yintercept=100) +annotate(geom="text", x=12, y=101, label="100%",
color="black")
# First, we have a list. we have to convert this list to a data.frame. with one column of errors and one column of model identifier:
vectorOfStrawErrors <- unlist(listOfStrawErrors)
StrawErrorsdf <- data.frame(error = vectorOfStrawErrors, model= as.factor(rep(4:12,each =20)))
dp <- ggplot(StrawErrorsdf, aes(x= model, y=error, fill=model)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="error of prediction for straw samples",x="# of variables selected", y = "relative error (n=20)")
dp + scale_fill_brewer(palette="Blues") + theme_minimal() + geom_hline(yintercept=100)
listOfStrawPredictions <-  vector('list', length = length(listOfModels))
for(i in 1:length(listOfModels)){
listOfStrawPredictions[[i]] <- predict(listOfModels[[i]], newdata = as.data.frame(StrawSiSpectra[,gen$bestsets[i,]]))
}
listOfStrawErrors <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfStrawErrors)){
listOfStrawErrors[[i]] <- (abs(listOfStrawPredictions[[i]]-metadataStrawSi$Si)/metadataStrawSi$Si)*100
}
# First, we have a list. we have to convert this list to a data.frame. with one column of errors and one column of model identifier:
vectorOfStrawErrors <- unlist(listOfStrawErrors)
StrawErrorsdf <- data.frame(error = vectorOfStrawErrors, model= as.factor(rep(4:12,each =20)))
dp <- ggplot(StrawErrorsdf, aes(x= model, y=error, fill=model)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="error of prediction for straw samples",x="# of variables selected", y = "relative error (n=20)")
dp + scale_fill_brewer(palette="Blues") + theme_minimal() + geom_hline(yintercept=100)
StrawSiSpectra[,gen$bestsets[1,]]
listOfNISTPredictions <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfModels)){
listOfNISTPredictions[[i]] <- predict(listOfModels[[i]], newdata = as.data.frame(correctedNIST[,gen$bestsets[i,]]))
}
listOfNISTErrors <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfNISTPredictions))
listOfNISTErrors[[i]] <- (abs(listOfNISTPredictions[[i]]-400)/400)*100
listOfNISTErrors
## wheat roots
Roots.index <- which(grepl(paste0('(?=.*','R',')'),metadata$class,perl = T))
Roots.index
metadata.Roots <- metadata[Roots.index,]
head(metadata.Roots)
which(is.na(metadata.Roots$Si))
which(is.na(metadata.Roots$spectra))
metadata.Roots$sample[c(8,6)]
metadataRootsSi <- metadata.Roots[-c(6,8),]
RootsSiSpectra <- corrected[metadataRootsSi$spectra.index,]
for (i in 1:length(rownames(RootsSiSpectra))){
plot(as.numeric(colnames(RootsSiSpectra)),
RootsSiSpectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.06))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
listOfRootsPredictions <-  vector('list', length = length(listOfModels))
for(i in 1:length(listOfModels)){
listOfRootsPredictions[[i]] <- predict(listOfModels[[i]], newdata = as.data.frame(RootsSiSpectra))
}
listOfRootsErrors <- vector('list', length = length(listOfModels))
for(i in 1:length(listOfRootsErrors)){
listOfRootsErrors[[i]] <- (abs(listOfRootsPredictions[[i]]-metadataRootsSi$Si)/metadataRootsSi$Si)*100
}
# First, we have a list. we have to convert this list to a data.frame. with one column of errors and one column of model identifier:
vectorOfRootsErrors <- unlist(listOfRootsErrors)
RootsErrorsdf <- data.frame(error = vectorOfRootsErrors, model= as.factor(rep(4:12,each =20)))
# First, we have a list. we have to convert this list to a data.frame. with one column of errors and one column of model identifier:
vectorOfRootsErrors <- unlist(listOfRootsErrors)
RootsErrorsdf <- data.frame(error = vectorOfRootsErrors, model= as.factor(rep(4:12,each = 16)))
dp <- ggplot(RootsErrorsdf, aes(x= model, y=error, fill=model)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="error of prediction for Roots samples",x="# of variables selected", y = "relative error (n=20)")
dp + scale_fill_brewer(palette="Blues") + theme_minimal() + geom_hline(yintercept=100)
# First, we have a list. we have to convert this list to a data.frame. with one column of errors and one column of model identifier:
vectorOfStrawErrors <- unlist(listOfStrawErrors)
StrawErrorsdf <- data.frame(error = vectorOfStrawErrors, model= as.factor(rep(4:12,each =20)))
dp <- ggplot(StrawErrorsdf, aes(x= model, y=error, fill=model)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="error of prediction for straw samples",x="# of variables selected", y = "relative error (n=20)")
dp + scale_fill_brewer(palette="Blues") + theme_minimal() + geom_hline(yintercept=100)
View(metadata)
namesludox <- list.files(path = "./AppleLeaves",pattern = '.CSV')
spectra.listludox <- lapply(paste0('./AppleLeaves/',namesludox), read.csv, header = F)
wavenumbersludox <- unlist(spectra.listludox[[1]][1])
spectra.list2ludox <- lapply(spectra.listludox, '[', 2)
spectra.dfludox <- as.data.frame(t(as.data.frame(spectra.list2ludox)))
rownames(spectra.dfludox) <- namesludox
colnames(spectra.dfludox) <- wavenumbersludox
for(i in  1:length(rownames(spectra.dfludox))){
plot(wavenumbersludox,
spectra.dfludox[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col ='black'
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = 'raw spectra full range',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab ='absorbance (a.u.)')
colnames(spectra.df)[c(1,676)]
range1ludox <- spectra.dfludox[,c(1:676)]
wavenumbers1ludox <- wavenumbersludox[c(1:676)]
for(i in  1:length(rownames(range1ludox))){
plot(wavenumbers1ludox,
range1ludox[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(1700, 400),
ylim= c(0,0.1),
type = 'l',
col ="black"
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = 'raw spectra - ROI',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab ='absorbance (a.u.)')
library(hyperSpec)
spcludox <- new('hyperSpec',
spc= range1ludox,
wavelength = wavenumbers1ludox)
bendludox <- 0.1 * wl.eval(spcludox,
function (x) x^6+x^5+x^4+x^3+x^2,
normalize.wl = normalize01)
blludox <- spc.rubberband(spcludox+bendludox, noise = 1e-4, df = 20)-bendludox
sumaludox <- spcludox+bendludox
spc3ludox <- spcludox - blludox
plot(spcludox, wl.reverse = TRUE)
plot(blludox, add=TRUE, col=2,wl.reverse = TRUE)
plot(sumaludox,wl.reverse = TRUE)
plot(bendludox, add=TRUE, col=2,wl.reverse = TRUE)
plot(spc3ludox,wl.reverse = TRUE)
corrected1ludox  <- as.data.frame(spc3ludox[1:5])
correctedludox <- as.data.frame(corrected1ludox[,1])
correctedludox <- correctedludox + (min(correctedludox)*-1) # shifting upwards to prevent negative values
correctedAndLudox <- rbind(corrected,corrected1ludox)
rownames(corrected)
colnames(corrected)
colnames(correctedludox)
colnames(correctedludox)[1]
colnames(corrected)[1]
colnames(corrected)[673]
colnames(corrected)[673]
rbind(corrected,correctedludox)
correctedAndLudox <- rbind(corrected,correctedludox)
tail(rownames(correctedAndLudox ))
min(correctedludox)
