col = 'black',
cex = 1,
font = 4
)
}
win.graph()
par(mfrow=c(2,3))
for(j in c(0,1,2)){
for (i in 1:length(rownames(leavesSiSpectra))){
plot(as.numeric(colnames(leavesSiSpectra)),
leavesSiSpectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.06),
col = cols[i])
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
abline(v = as.numeric(colnames(leavesSiSpectra)[gen$bestsets[(4*j)+1,]]),
col = 1,
lty = 2)
text(1560,
0.055,
c('4 variables', '8 variables', '12 variables')[j+1],
lty = 2,
col = 'black',
cex = 1,
font = 4
)
}
## Curvas de calibracion
par(mfrow = c(1,3))
for(i in c(0,1,2)){
plot(ActualSi,
listOfPredictions1[[(4*i)+1]],
xlab="Actual Si (mg/kg)" ,
ylab="Predicted Si (mg/kg)",
pch=17,
cex=1.2,
col="darkorchid4",
cex.lab=1
)
abline(a=0  , b=1, col=1, lty=1, lwd=2)
text(rep(15000,3)[i+1],
rep(62000,3)[i+1],
c(expression(paste('R'['adj']^'2','= 0.7823')),
expression(paste('R'['adj']^'2','= 0.9782')),
expression(paste('R'['adj']^'2','= 0.9965')))[i+1],
col = 'black',
cex= 1.2,
font = 4
)
text(rep(55000,3)[i+1],
rep(5000,3)[i+1],
c(expression(paste('p'['model'],'= 1.51e+06')),
expression(paste('p'['model'],'= 1.14e-11')),
expression(paste('p'['model'],'= 2.42e-12')))[i+1],
col = 'black',
cex= 1.2,
font = 4
)
par(new=F)
}
win.graph()
par(mfrow=c(2,3))
for(j in c(0,1,2)){
for (i in 1:length(rownames(leavesSiSpectra))){
plot(as.numeric(colnames(leavesSiSpectra)),
leavesSiSpectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.06),
col = cols[i])
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
abline(v = as.numeric(colnames(leavesSiSpectra)[gen$bestsets[(4*j)+1,]]),
col = 1,
lty = 2)
text(1560,
0.055,
c('4 variables', '8 variables', '12 variables')[j+1],
lty = 2,
col = 'black',
cex = 1,
font = 4
)
}
## Curvas de calibracion
# par(mfrow = c(1,3))
for(i in c(0,1,2)){
plot(ActualSi,
listOfPredictions1[[(4*i)+1]],
xlab="Actual Si (mg/kg)" ,
ylab="Predicted Si (mg/kg)",
pch=17,
cex=1.2,
col="darkorchid4",
cex.lab=1
)
abline(a=0  , b=1, col=1, lty=1, lwd=2)
text(rep(15000,3)[i+1],
rep(62000,3)[i+1],
c(expression(paste('R'['adj']^'2','= 0.7823')),
expression(paste('R'['adj']^'2','= 0.9782')),
expression(paste('R'['adj']^'2','= 0.9965')))[i+1],
col = 'black',
cex= 1.2,
font = 4
)
text(rep(55000,3)[i+1],
rep(5000,3)[i+1],
c(expression(paste('p'['model'],'= 1.51e+06')),
expression(paste('p'['model'],'= 1.14e-11')),
expression(paste('p'['model'],'= 2.42e-12')))[i+1],
col = 'black',
cex= 1.2,
font = 4
)
par(new=F)
}
win.graph()
par(mfrow = c(1,2))
dp1 <- ggplot(ResidualsTable, aes(x=Variables, y= Residuals, fill=Variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="",x="# of variables selected", y = "Residuals (mg/kg)")
dp1 + scale_fill_brewer(palette="Greens") + theme_minimal()
dev.off()
## Cross validation RMSEP
library(ggplot2)
# tiff('./plots/CVRMSEP.tiff',
#      width = 8640,
#      height = 4860,
#      res = 1200
#      )
# svg('./plots/CVRMSEP.svg',
#     width = 11.88,
#     height = 6.37,
#     pointsize = 15)
library(ggplot2)
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP, fill=variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title=" ",x="# of variables selected", y = "RMSE (n = 1000, mg/kg)")
dp + scale_fill_brewer(palette="Blues") + theme_light()
rgl_init <- function(new.device = FALSE, bg = "white", width = 640) {
if( new.device | rgl.cur() == 0 ) {
rgl.open()
par3d(windowRect = 50 + c( 0, 0, width, width ) )
rgl.bg(color = bg )
}
rgl.clear(type = c("shapes", "bboxdeco"))
rgl.viewpoint(theta = 15, phi = 20, zoom = 0.7)
}
rgl_add_axes <- function(x, y, z, axis.col = "black",#91.72  7.59  0.63 => 99.94
xlab = "PC1 - 91.72 %", ylab="PC2 -7.59 %", zlab="PC3 - 0.63 %", show.plane = FALSE,
show.bbox = TRUE, bbox.col = c("white","black"))
{
lim <- function(x){c(-max(abs(x)), max(abs(x))) * 1.1}
# Add axes
xlim <- lim(x); ylim <- lim(y); zlim <- lim(z)
rgl.lines(xlim, c(0, 0), c(0, 0), color = axis.col)
rgl.lines(c(0, 0), ylim, c(0, 0), color = axis.col)
rgl.lines(c(0, 0), c(0, 0), zlim, color = axis.col)
# Add a point at the end of each axes to specify the direction
axes <- rbind(c(xlim[2], 0, 0), c(0, ylim[2], 0),
c(0, 0, zlim[2]))
rgl.points(axes, color = axis.col, size = 3)
# Add axis labels
rgl.texts(axes, text = c(xlab, ylab, zlab), color = axis.col,
adj = c(0.5, -0.8), size = 2)
# # Add plane
# if(show.plane)
#   xlim <- xlim/1.1; zlim <- zlim /1.1
#   rgl.quads( x = rep(xlim, each = 2), y = c(0, 0, 0, 0),
#            z = c(zlim[1], zlim[2], zlim[2], zlim[1]))
# Add bounding box decoration
if(show.bbox){
rgl.bbox(color=c(bbox.col[1],bbox.col[2]), alpha = 0.5,
emission=bbox.col[1], specular=bbox.col[1], shininess=5,
xlen = 3, ylen = 3, zlen = 3)
}
}
names <- list.files(pattern = '.CSV')
spectra.list <- lapply(names,
read.csv,
header = F)
wavenumbers <- unlist(spectra.list[[1]][1])
spectra.list2 <- lapply(spectra.list, '[', 2)
spectra.df <- as.data.frame(
t(as.data.frame(spectra.list2))
)
rownames(spectra.df) <- names
colnames(spectra.df) <- wavenumbers
# gsub('.{6}$', '', names)
head(names[1:3])
names2 <- gsub('.{4}$',
'',
rownames(spectra.df))
head(names2[1:4])
head(names2[292:318])
names2[292:318] <- gsub('.{41}$',
'',
rownames(
spectra.df
)[292:318])
head(names2[292:318])[1:4]
rownames(spectra.df) <- names2
options(width = 30)
cols <- factor(gsub('.{2}$', '', names2))
head(cols)
for(i in  1:length(rownames(spectra.df))){
plot(wavenumbers,
spectra.df[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
residualsT <- c(listOfModels1[[1]]$residuals,
listOfModels1[[2]]$residuals,
listOfModels1[[3]]$residuals,
listOfModels1[[4]]$residuals,
listOfModels1[[5]]$residuals,
listOfModels1[[6]]$residuals,
listOfModels1[[7]]$residuals,
listOfModels1[[8]]$residuals,
listOfModels1[[9]]$residuals)
VariablesResiduals <- c(rep(1,23),
rep(2,23),
rep(3,23),
rep(4,23),
rep(5,23),
rep(6,23),
rep(7,23),
rep(8,23),
rep(9,23)
)
ResidualsTable <- data.frame(Residuals = residualsT, Variables = VariablesResiduals)
ResidualsTable$Variables <- as.factor(ResidualsTable$Variables)
dp1 <- ggplot(ResidualsTable, aes(x=Variables, y= Residuals, fill=Variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="",x="# of variables selected", y = "Residuals (mg/kg)")
dp1 + scale_fill_brewer(palette="Greens") + theme_minimal()
win.graph()
par(mfrow = c(1,2))
dp1 <- ggplot(ResidualsTable, aes(x=Variables, y= Residuals, fill=Variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="",x="# of variables selected", y = "Residuals (mg/kg)")
dp1 + scale_fill_brewer(palette="Greens") + theme_minimal()
dev.off()
## Cross validation RMSEP
library(ggplot2)
# tiff('./plots/CVRMSEP.tiff',
#      width = 8640,
#      height = 4860,
#      res = 1200
#      )
# svg('./plots/CVRMSEP.svg',
#     width = 11.88,
#     height = 6.37,
#     pointsize = 15)
library(ggplot2)
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP, fill=variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title=" ",x="# of variables selected", y = "RMSE (n = 1000, mg/kg)")
dp + scale_fill_brewer(palette="Blues") + theme_light()
win.graph()
par(mfrow = c(1,2))
dp1 <- ggplot(ResidualsTable, aes(x=Variables, y= Residuals, fill=Variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="",x="# of variables selected", y = "Residuals (mg/kg)")
dp1 + scale_fill_brewer(palette="Greens") + theme_minimal()
dev.off()
win.graph()
par(mfrow = c(1,2))
dp1 <- ggplot(ResidualsTable, aes(x=Variables, y= Residuals, fill=Variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="",x="# of variables selected", y = "Residuals (mg/kg)")
dp1 + scale_fill_brewer(palette="Greens") + theme_minimal()
win.graph()
par(mfrow = c(1,2))
dp1 <- ggplot(ResidualsTable, aes(x=Variables, y= Residuals, fill=Variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="",x="# of variables selected", y = "Residuals (mg/kg)")
dp1 + scale_fill_brewer(palette="Greens") + theme_minimal()
win.graph()
pValTable <- data.frame(matrix(nrow = 9, nrow = 12))
win.graph()
pValTable <- data.frame(matrix(nrow = 9, ncol = 12))
summary(listOfModels1[[1]])$coefficients[,4]
win.graph()
par(mfrow = c(3,3))
for(i in 1:9){
barplot(summary(listOfModels1[[i]])$coefficients[,4],
horiz = T,
names.arg = c('intercept', colnames(leavesSiSpectra[,gen$bestsets[i,]])))
abline(v = 0.05, lty =2)
}
summary(mols)
library(tidyverse)
library(caret)
# First we create a list of tables with the best subsets selected by the genetic algorithm
listOfTables <- vector('list', nrow(gen$bestsets))
listOfModels <- vector('list', nrow(gen$bestsets))
listOfRMSEP <- vector('list', nrow(gen$bestsets))
system.time(
for(i in 1:nrow(gen$bestsets)){
listOfTables[[i]] <- cbind(Si  = metadata.leaves.Si$Si, as.data.frame(leavesSiSpectra[,gen$bestsets[i,]]))
# setting seed to generate a
# reproducible random sampling
set.seed(125)
# defining training control as
# repeated cross-validation and
# value of K is 10 and repetition is 100 times
train_control <- trainControl(method = "repeatedcv",
number = 10, repeats = 100)
# training the model by assigning sales column
# as target variable and rest other column
# as independent variable
listOfModels[[i]] <- train(Si ~.,
data = listOfTables[[i]],
method = "lm",
trControl = train_control)
listOfRMSEP[[i]] <- listOfModels[[i]]$resample$RMSE
}
)
RMSEP <- c(listOfRMSEP[[1]],listOfRMSEP[[2]],listOfRMSEP[[3]],listOfRMSEP[[4]],listOfRMSEP[[5]],listOfRMSEP[[6]],listOfRMSEP[[7]],listOfRMSEP[[8]],listOfRMSEP[[9]])
RMSEPTable <- data.frame(RMSEP = RMSEP, variables = c(rep(4,1000),rep(5,1000),rep(6,1000),rep(7,1000),rep(8,1000),rep(9,1000),rep(10,1000),rep(11,1000),rep(12,1000)))
RMSEPTable$variables <- as.factor(RMSEPTable$variables)
# # R program to implement
# # repeated K-fold cross-validation
#
# # setting seed to generate a
# # reproducible random sampling
# set.seed(125)
#
# # defining training control as
# # repeated cross-validation and
# # value of K is 10 and repetation is 3 times
# train_control <- trainControl(method = "repeatedcv",
#                             number = 10, repeats = 3)
#
# # training the model by assigning sales column
# # as target variable and rest other column
# # as independent variable
# model <- train(Si ~., data = marketing,
#                method = "lm",
#                trControl = train_control)
#
# # printing model performance metrics
# # along with other details
# print(model)
win.graph()
library(ggplot2)
par(mfrow = c(1,2))
dp1 <- ggplot(ResidualsTable, aes(x=Variables, y= Residuals, fill=Variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="",x="# of variables selected", y = "Residuals (mg/kg)")
dp1 + scale_fill_brewer(palette="Greens") + theme_minimal()
## Cross validation RMSEP
# tiff('./plots/CVRMSEP.tiff',
#      width = 8640,
#      height = 4860,
#      res = 1200
#      )
# svg('./plots/CVRMSEP.svg',
#     width = 11.88,
#     height = 6.37,
#     pointsize = 15)
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP, fill=variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title=" ",x="# of variables selected", y = "RMSE (n = 1000, mg/kg)")
dp + scale_fill_brewer(palette="Blues") + theme_light()
win.graph()
library(ggplot2)
par(mfrow = c(1,2))
dp1 <- ggplot(ResidualsTable, aes(x=Variables, y= Residuals, fill=Variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="",x="# of variables selected", y = "Residuals (mg/kg)")
dp1 + scale_fill_brewer(palette="Greens") + theme_minimal()
par(new = F)
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP, fill=variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title=" ",x="# of variables selected", y = "RMSE (n = 1000, mg/kg)")
dp + scale_fill_brewer(palette="Blues") + theme_light()
win.graph()
library(ggplot2)
par(mfrow = c(2,1))
dp1 <- ggplot(ResidualsTable, aes(x=Variables, y= Residuals, fill=Variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="",x="# of variables selected", y = "Residuals (mg/kg)")
dp1 + scale_fill_brewer(palette="Greens") + theme_minimal()
par(new = F)
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP, fill=variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title=" ",x="# of variables selected", y = "RMSE (n = 1000, mg/kg)")
dp + scale_fill_brewer(palette="Blues") + theme_light()
win.graph()
library(ggplot2)
library(gridExtra)
dp1 <- ggplot(ResidualsTable, aes(x=Variables, y= Residuals, fill=Variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="",x="# of variables selected", y = "Residuals (mg/kg)") +
scale_fill_brewer(palette="Greens") + theme_minimal()
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP, fill=variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title=" ",x="# of variables selected", y = "RMSE (n = 1000, mg/kg)") +
scale_fill_brewer(palette="Blues") + theme_light()
grid.arrange(dp1,dp)
residualsT <- c(listOfModels1[[1]]$residuals,
listOfModels1[[2]]$residuals,
listOfModels1[[3]]$residuals,
listOfModels1[[4]]$residuals,
listOfModels1[[5]]$residuals,
listOfModels1[[6]]$residuals,
listOfModels1[[7]]$residuals,
listOfModels1[[8]]$residuals,
listOfModels1[[9]]$residuals)
VariablesResiduals <- c(rep(4,23),
rep(5,23),
rep(6,23),
rep(7,23),
rep(8,23),
rep(9,23),
rep(10,23),
rep(11,23),
rep(12,23)
)
ResidualsTable <- data.frame(Residuals = residualsT, Variables = VariablesResiduals)
ResidualsTable$Variables <- as.factor(ResidualsTable$Variables)
dp1 <- ggplot(ResidualsTable, aes(x=Variables, y= Residuals, fill=Variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="",x="# of variables selected", y = "Residuals (mg/kg)")
dp1 + scale_fill_brewer(palette="Greens") + theme_minimal()
win.graph()
library(ggplot2)
library(gridExtra)
dp1 <- ggplot(ResidualsTable, aes(x=Variables, y= Residuals, fill=Variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="",x="# of variables selected", y = "Residuals (mg/kg)") +
scale_fill_brewer(palette="Greens") + theme_minimal()
dp <- ggplot(RMSEPTable, aes(x=variables, y=RMSEP, fill=variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title=" ",x="# of variables selected", y = "RMSE (n = 1000, mg/kg)") +
scale_fill_brewer(palette="Blues") + theme_light()
grid.arrange(dp1,dp)
residualsT <- c(listOfModels1[[1]]$residuals,
listOfModels1[[2]]$residuals,
listOfModels1[[3]]$residuals,
listOfModels1[[4]]$residuals,
listOfModels1[[5]]$residuals,
listOfModels1[[6]]$residuals,
listOfModels1[[7]]$residuals,
listOfModels1[[8]]$residuals,
listOfModels1[[9]]$residuals)
VariablesResiduals <- c(rep(4,23),
rep(5,23),
rep(6,23),
rep(7,23),
rep(8,23),
rep(9,23),
rep(10,23),
rep(11,23),
rep(12,23)
)
ResidualsTable <- data.frame(Residuals = residualsT, Variables = VariablesResiduals)
ResidualsTable$Variables <- as.factor(ResidualsTable$Variables)
dp1 <- ggplot(ResidualsTable, aes(x=Variables, y= Residuals, fill=Variables)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill='white')+
labs(title="",x="# of variables selected", y = "Residuals (mg/kg)")
dp1 + scale_fill_brewer(palette="Greens") + theme_minimal()
