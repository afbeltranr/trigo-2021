960*@
960*
960*3
960*3
240*3
2880*2
library(mdatools)
LeavesPLS <-
pls(leavesSiSpectra[,gen$bestsets[4,]],
SiTable$Si,
10,
cv =1)
rgl_init <- function(new.device = FALSE, bg = "white", width = 640) {
if( new.device | rgl.cur() == 0 ) {
rgl.open()
par3d(windowRect = 50 + c( 0, 0, width, width ) )
rgl.bg(color = bg )
}
rgl.clear(type = c("shapes", "bboxdeco"))
rgl.viewpoint(theta = 15, phi = 20, zoom = 0.7)
}
rgl_add_axes <- function(x, y, z, axis.col = "black",#91.72  7.59  0.63 => 99.94
xlab = "PC1 - 91.72 %", ylab="PC2 -7.59 %", zlab="PC3 - 0.63 %", show.plane = FALSE,
show.bbox = TRUE, bbox.col = c("white","black"))
{
lim <- function(x){c(-max(abs(x)), max(abs(x))) * 1.1}
# Add axes
xlim <- lim(x); ylim <- lim(y); zlim <- lim(z)
rgl.lines(xlim, c(0, 0), c(0, 0), color = axis.col)
rgl.lines(c(0, 0), ylim, c(0, 0), color = axis.col)
rgl.lines(c(0, 0), c(0, 0), zlim, color = axis.col)
# Add a point at the end of each axes to specify the direction
axes <- rbind(c(xlim[2], 0, 0), c(0, ylim[2], 0),
c(0, 0, zlim[2]))
rgl.points(axes, color = axis.col, size = 3)
# Add axis labels
rgl.texts(axes, text = c(xlab, ylab, zlab), color = axis.col,
adj = c(0.5, -0.8), size = 2)
# # Add plane
# if(show.plane)
#   xlim <- xlim/1.1; zlim <- zlim /1.1
#   rgl.quads( x = rep(xlim, each = 2), y = c(0, 0, 0, 0),
#            z = c(zlim[1], zlim[2], zlim[2], zlim[1]))
# Add bounding box decoration
if(show.bbox){
rgl.bbox(color=c(bbox.col[1],bbox.col[2]), alpha = 0.5,
emission=bbox.col[1], specular=bbox.col[1], shininess=5,
xlen = 3, ylen = 3, zlen = 3)
}
}
names <- list.files(pattern = '.CSV')
spectra.list <- lapply(names,
read.csv,
header = F)
wavenumbers <- unlist(spectra.list[[1]][1])
spectra.list2 <- lapply(spectra.list, '[', 2)
spectra.df <- as.data.frame(
t(as.data.frame(spectra.list2))
)
rownames(spectra.df) <- names
colnames(spectra.df) <- wavenumbers
# gsub('.{6}$', '', names)
head(names[1:3])
names2 <- gsub('.{4}$',
'',
rownames(spectra.df))
head(names2[1:4])
head(names2[292:318])
names2[292:318] <- gsub('.{41}$',
'',
rownames(
spectra.df
)[292:318])
head(names2[292:318])[1:4]
rownames(spectra.df) <- names2
options(width = 30)
cols <- factor(gsub('.{2}$', '', names2))
head(cols)
for(i in  1:length(rownames(spectra.df))){
plot(wavenumbers,
spectra.df[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(4000, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
colnames(spectra.df)[c(1,676)]
range1 <- spectra.df[,c(1:676)]
wavenumbers1 <- wavenumbers[c(1:676)]
for(i in  1:length(rownames(range1))){
plot(wavenumbers1,
range1[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(1700, 400),
ylim= c(0,0.2),
type = 'l',
col =cols[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = 'raw spectra - ROI',
xlab = expression(
paste('Wave number (cm'^'-1',
')'
)),
ylab ='absorbance (a.u.)')
options(width = 30)
search.vector <- unique(unlist(cols))
head(search.vector)
index <- list(106)
as.character(search.vector[1]) # the name of
#the first sample
which(
grepl(
paste0('(?=.*',
as.character(search.vector[1]),
')'
),
rownames(spectra.df),
perl=T
)
)
rownames(spectra.df)[c(1, 2, 3)]
for (i in 1:106){
index[[i]] <- which(
grepl(
paste0('(?=.*',
as.character(search.vector[i])
,')'),
rownames(spectra.df),
perl=T
)
)
}
search.vector[2]
rownames(spectra.df)[c(index[[2]])]
mean <- matrix(ncol= ncol(range1),
nrow = nrow(range1)/3)
# mean <- as.data.frame(mean)
colnames(mean) <- colnames(range1)
rownames(mean) <- search.vector
mean[1,1]
index[[1]]
for(j in 1:ncol(range1)){
for(i in 1:nrow(mean)){
mean[i,j] <- mean(c(range1[index[[i]][1],j],
range1[index[[i]][2],j],
range1[index[[i]][3],j]
) )
}
}
mean <- as.data.frame(mean)
cols.means <- as.factor(search.vector)
for(i in  1:length(rownames(mean))){
plot(wavenumbers1,
mean[i,],
axes = F,
xlab = '',
ylab = '',
xlim = c(1700, 400),
ylim= c(0,0.135309),
type = 'l',
col =cols.means[i]
)
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste('Wave number (cm'^'-1',
')')
),
ylab ='absorbance (a.u.)')
library(hyperSpec)
# hyperSpec package functions and
#data is charged in this session
spc <- new('hyperSpec', # The class of the object
spc= mean, # the spectra matrix
wavelength = wavenumbers1
# independent variable, whether wave number
#or wave length
)
bend <- 0.1 * wl.eval(spc,
function (x)
x^6+x^5+x^4+x^3+x^2,
normalize.wl =
normalize01)
bl <- spc.rubberband(spc+bend,
noise = 1e-4,
df = 20)-bend
labels (spc, ".wavelength") <-
expression(paste(
'Wave number (cm'^'-1',
')'))
labels (spc, "spc") <-
expression(paste('Absorbance (a.u.)'))
plot(spc, wl.reverse = TRUE)
plot(bl, add=TRUE, col=2,wl.reverse = TRUE)
sum <- spc+bend
plot(sum,wl.reverse = TRUE)
plot(bend, add=TRUE, col=2,wl.reverse = TRUE)
spc3 <- spc - bl
spc3 <- spc3 + (min(spc3)*-1)
# We add the minimum value
#which is negative to have only positive
#values
plot(spc3,wl.reverse = TRUE)
corrected1  <- as.data.frame(spc3[1:106])
corrected <- as.data.frame(corrected1[,1])
corrected <- corrected + (min(corrected)*-1)
# shifting upwards to prevent negative values
library(pls)
correctedMSC <- msc(as.matrix(mean))
for (i in 1:length(rownames(correctedMSC))){
plot(as.numeric(colnames(correctedMSC)),
correctedMSC[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.12),
col = cols[i])
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(paste(
'Wave number (cm'^'-1',
')')),
ylab = 'Absorbance (a.u.)')
library(readxl)
metadata <- read_excel("metadata.xlsx")
options(width = 30)
colnames(metadata)
which(is.na(metadata$sample))
metadata <- metadata[-c(17),]
which(is.na(metadata$sample))
positions <- vector('list', 87)
# the same sizeas metadata$sample
for (i in 1:87){
positions[[i]] <- which(
grepl(
paste0('(?=.*',
as.character(
metadata$sample[i]),
')'),
rownames(corrected),
perl=T
)
)
}
metadata$sample[1]
positions[[1]]
rownames(corrected)[positions[[1]]]
for(i in 1:length(metadata$sample)) {
if(length(positions[[i]]) == 1){
metadata$spectra[i] <-
rownames(corrected)[positions[[i]]]
}else{
metadata$spectra[i] <- NA
}
}
compare <- data.frame(metadata =
metadata$sample,
spectra =
metadata$spectra)
head(compare)
metadata$spectra.index <- rep(0, nrow(metadata))
for(i in 1:length(metadata$sample)) {
if(length(positions[[i]]) == 1){
metadata$spectra.index[i] <- positions[[i]]
}else{
metadata$spectra.index[i] <- NA
}
}
which(is.na(metadata$class))
metadata.class <- metadata[
-c( which(
is.na(metadata$class))),]
which(is.na(metadata.class$class))
which(is.na(metadata.class$spectra.index))
metadata.class2 <-
metadata.class[
-c(which
(is.na(
metadata.class$spectra.index)) ),]
which(is.na(metadata.class2$spectra.index))
spectra.class <- corrected[
metadata.class2$spectra.index,]
compare.class <- data.frame(
classification = metadata.class2$sample,
spectra= rownames(spectra.class))
head(compare.class)
df1 <- spectra.class
names.class <-
paste(metadata.class2$class, rownames(
spectra.class))
rownames(df1) <- names.class
logdf <- log10(df1[,1:676] + 1)
rownames(logdf) <- names.class
hClust1 <- hclust(dist(logdf))
plot(hClust1)
library(factoextra)
res.hk <-hkmeans(logdf,
5,
hc.metric =  'minkowski')
fviz_dend(res.hk,
cex = 0.5,
palette = "jco",
rect = TRUE,
rect_border = "jco",
rect_fill = TRUE)
colspca <- vector('character', nrow(df1))
for(i in 1:nrow(df1)){
if( grepl(
paste0('(?=.*',
'L',
')'),
metadata.class2$class[i],perl = T))
{colspca[i] <- 'black'}else{
if(grepl(
paste0('(?=.*',
'R',
')'),
metadata.class2$class[i],perl = T))
{colspca[i] <- 'red'}
else{colspca[i] <- 'white'}
}
}
pcaall <- prcomp(spectra.class)
vp <- (pcaall$sdev)^2
variance <- round(vp/sum(vp)*100,2)
coord <- pcaall$x
plot(coord[,1],
coord[,2],
col=colspca,
xlab="PC1 - 40.74 %",
ylab= "PC2 - 16.46 %",
pch=19
)
abline(v=0, h=0, lty=2)
text(coord[,1],
coord[,2],
rownames(coord),
cex=0.4,
pos=1)
leaves.index <- which(
grepl(
paste0('(?=.*',
'L',
')'),
metadata$class,perl = T))
leaves.index
metadata.leaves <- metadata[leaves.index,]
which(is.na(metadata.leaves$Si))
which(is.na(metadata.leaves$spectra))
metadata.leaves$sample[11]
metadata.leaves.Si <-
metadata.leaves[-c(11),]
LeavesSi <-
cbind(
metadata.leaves.Si$sample,
metadata.leaves.Si$Si)
leavesSiSpectra <- corrected[metadata.leaves.Si$spectra.index,]
leavesSiSpectraRaw <- mean[metadata.leaves.Si$spectra.index,]
par(mfrow = c(1,2))
for (i in 1:length(
rownames(leavesSiSpectraRaw )
)
){
plot(as.numeric(
colnames(leavesSiSpectraRaw )
),
leavesSiSpectraRaw [i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.1))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste(
'Wave number (cm'^'-1',
')'
)
),
ylab = 'Absorbance (a.u.)')
par(new = F)
for (i in 1:length(
rownames(leavesSiSpectra)
)
){
plot(as.numeric(
colnames(leavesSiSpectra)
),
leavesSiSpectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.1))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = '',
xlab = expression(
paste(
'Wave number (cm'^'-1',
')'
)
),
ylab = 'Absorbance (a.u.)')
leavesSiSpectra <-
as.matrix(leavesSiSpectra)
SiTable <-
data.frame(Si = I(metadata.leaves.Si$Si),
spectra = I(leavesSiSpectra) )
newRange <-
leavesSiSpectra[,c(261:676)]
colnames( leavesSiSpectra[,c(261,676)])
library(mdatools)
LeavesPLS <- pls(leavesSiSpectra,
SiTable$Si,
10,
cv =1)
summary(LeavesPLS)
summary(LeavesPLS$res$cal)
plot(LeavesPLS)
par(mfrow=c(2,2))
plotXVariance(LeavesPLS)
plotXCumVariance(LeavesPLS)
plotYVariance(LeavesPLS)
plotYCumVariance(LeavesPLS)
library(subselect)
Hmat <- lmHmat(leavesSiSpectra,
metadata.leaves.Si$Si)
gen <- genetic(Hmat$mat,
kmin =5,
kmax = 16,
H= Hmat$H,
r =1,
crit = 'CCR12',
force = T)
par(mfrow=c(3,3))
for(j in 1:nrow(gen$bestsets)){
for (i in 1:length(rownames(leavesSiSpectra))){
plot(as.numeric(colnames(leavesSiSpectra)),
leavesSiSpectra[i,],
xlab = '',
ylab = '',
axes = F,
type = 'l',
xlim = c(1700,400),
ylim = c(0,0.06))
par(new = T)
}
box()
axis(1)
axis(2)
title(main = paste(
as.character(c(4:15)[j]),
'variables'),
xlab = expression(
paste('Wave number (cm'^'-1',')')),
ylab = 'Absorbance (a.u.)')
abline(v = as.numeric(
colnames(
leavesSiSpectra
)[gen$bestsets[j,]]),
col = 2,
lty = 2)
}
library(mdatools)
LeavesPLS <-
pls(leavesSiSpectra[,gen$bestsets[4,]],
SiTable$Si,
10,
cv =1)
plot(LeavesPLS)
